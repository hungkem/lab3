
lab3_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003024  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003154  08003154  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003154  08003154  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003154  08003154  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800315c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000007c  080031d8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080031d8  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009684  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcc  00000000  00000000  00029729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e93  00000000  00000000  0002c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c072  00000000  00000000  0004359b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008236b  00000000  00000000  0004f60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002934  00000000  00000000  000d19cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003118 	.word	0x08003118

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003118 	.word	0x08003118

0800014c <subKeyProcess>:
	int gpio_pin[NUMBER_BUTTONS] 			= {button1_Pin, button2_Pin, button3_Pin};
	GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port};

	// set flag
	void subKeyProcess(int key_index)
	{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
		button_flag[key_index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000098 	.word	0x20000098

0800016c <isButtonPressed>:


	int isButtonPressed(int key_index)
	{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
		if(button_flag[key_index] == 1)
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
		{
			button_flag[key_index] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
		}
		return 0;
 800018e:	2300      	movs	r3, #0
	}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000098 	.word	0x20000098

080001a0 <getKeyInput>:

	void getKeyInput()
	{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
		for(int i = 0; i < NUMBER_BUTTONS; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e077      	b.n	800029c <getKeyInput+0xfc>
		{
			key_reg_0[i] = key_reg_1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			key_reg_1[i] = key_reg_2[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			key_reg_2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 80001cc:	4a3a      	ldr	r2, [pc, #232]	; (80002b8 <getKeyInput+0x118>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4939      	ldr	r1, [pc, #228]	; (80002bc <getKeyInput+0x11c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	4619      	mov	r1, r3
 80001e0:	4610      	mov	r0, r2
 80001e2:	f001 ff6d 	bl	80020c0 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4619      	mov	r1, r3
 80001ea:	4a32      	ldr	r2, [pc, #200]	; (80002b4 <getKeyInput+0x114>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((key_reg_0[i] == key_reg_1[i]) && (key_reg_1[i] == key_reg_2[i]))
 80001f2:	4a2f      	ldr	r2, [pc, #188]	; (80002b0 <getKeyInput+0x110>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	492c      	ldr	r1, [pc, #176]	; (80002ac <getKeyInput+0x10c>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000202:	429a      	cmp	r2, r3
 8000204:	d147      	bne.n	8000296 <getKeyInput+0xf6>
 8000206:	4a29      	ldr	r2, [pc, #164]	; (80002ac <getKeyInput+0x10c>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	4929      	ldr	r1, [pc, #164]	; (80002b4 <getKeyInput+0x114>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000216:	429a      	cmp	r2, r3
 8000218:	d13d      	bne.n	8000296 <getKeyInput+0xf6>
			{
				if(key_reg_3[i] != key_reg_2[i]) // press and drop
 800021a:	4a29      	ldr	r2, [pc, #164]	; (80002c0 <getKeyInput+0x120>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	4924      	ldr	r1, [pc, #144]	; (80002b4 <getKeyInput+0x114>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d016      	beq.n	800025c <getKeyInput+0xbc>
				{
					key_reg_3[i] = key_reg_2[i];
 800022e:	4a21      	ldr	r2, [pc, #132]	; (80002b4 <getKeyInput+0x114>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	4922      	ldr	r1, [pc, #136]	; (80002c0 <getKeyInput+0x120>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(key_reg_2[i] == PRESSED_STATE)
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x114>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d125      	bne.n	8000296 <getKeyInput+0xf6>
					{
						subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff7e 	bl	800014c <subKeyProcess>
						time_for_key_press[i] = 200;
 8000250:	4a1c      	ldr	r2, [pc, #112]	; (80002c4 <getKeyInput+0x124>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	21c8      	movs	r1, #200	; 0xc8
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025a:	e01c      	b.n	8000296 <getKeyInput+0xf6>
					}
				}
				else // press and hold
				{
					time_for_key_press[i] --;
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <getKeyInput+0x124>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	1e5a      	subs	r2, r3, #1
 8000266:	4917      	ldr	r1, [pc, #92]	; (80002c4 <getKeyInput+0x124>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(time_for_key_press[i] <= 0)
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <getKeyInput+0x124>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dc0d      	bgt.n	8000296 <getKeyInput+0xf6>
					{
						if(key_reg_2[i] == PRESSED_STATE)
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x114>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d102      	bne.n	800028c <getKeyInput+0xec>
						{
							subKeyProcess(i);
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f7ff ff60 	bl	800014c <subKeyProcess>
						}
						time_for_key_press[i] = 200;
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <getKeyInput+0x124>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	21c8      	movs	r1, #200	; 0xc8
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < NUMBER_BUTTONS; i++)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	dd84      	ble.n	80001ac <getKeyInput+0xc>
					}
				}
			}
		}
	}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000018 	.word	0x20000018
 80002b8:	20000048 	.word	0x20000048
 80002bc:	2000003c 	.word	0x2000003c
 80002c0:	20000024 	.word	0x20000024
 80002c4:	20000030 	.word	0x20000030

080002c8 <fsm_automatic_run>:


#include"fsm_automatic.h"

	void fsm_automatic_run()
	{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	af00      	add	r7, sp, #0
		switch(status)
 80002cc:	4b82      	ldr	r3, [pc, #520]	; (80004d8 <fsm_automatic_run+0x210>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	f200 82f2 	bhi.w	80008bc <fsm_automatic_run+0x5f4>
 80002d8:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <fsm_automatic_run+0x18>)
 80002da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002de:	bf00      	nop
 80002e0:	080002f5 	.word	0x080002f5
 80002e4:	08000395 	.word	0x08000395
 80002e8:	080004f5 	.word	0x080004f5
 80002ec:	0800062b 	.word	0x0800062b
 80002f0:	08000789 	.word	0x08000789
		{
			case INIT:
				clearLed();
 80002f4:	f000 fddc 	bl	8000eb0 <clearLed>
				status = REDX_GREENY_AUTO; // next state
 80002f8:	4b77      	ldr	r3, [pc, #476]	; (80004d8 <fsm_automatic_run+0x210>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	601a      	str	r2, [r3, #0]
				counter1 = red_timer;
 80002fe:	4b77      	ldr	r3, [pc, #476]	; (80004dc <fsm_automatic_run+0x214>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a77      	ldr	r2, [pc, #476]	; (80004e0 <fsm_automatic_run+0x218>)
 8000304:	6013      	str	r3, [r2, #0]
				counter2 = green_timer;
 8000306:	4b77      	ldr	r3, [pc, #476]	; (80004e4 <fsm_automatic_run+0x21c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a77      	ldr	r2, [pc, #476]	; (80004e8 <fsm_automatic_run+0x220>)
 800030c:	6013      	str	r3, [r2, #0]
				updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 800030e:	4b74      	ldr	r3, [pc, #464]	; (80004e0 <fsm_automatic_run+0x218>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a76      	ldr	r2, [pc, #472]	; (80004ec <fsm_automatic_run+0x224>)
 8000314:	fb82 1203 	smull	r1, r2, r2, r3
 8000318:	1092      	asrs	r2, r2, #2
 800031a:	17db      	asrs	r3, r3, #31
 800031c:	1ad4      	subs	r4, r2, r3
 800031e:	4b70      	ldr	r3, [pc, #448]	; (80004e0 <fsm_automatic_run+0x218>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b72      	ldr	r3, [pc, #456]	; (80004ec <fsm_automatic_run+0x224>)
 8000324:	fb83 1302 	smull	r1, r3, r3, r2
 8000328:	1099      	asrs	r1, r3, #2
 800032a:	17d3      	asrs	r3, r2, #31
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	460b      	mov	r3, r1
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	440b      	add	r3, r1
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	1ad1      	subs	r1, r2, r3
 8000338:	4b6b      	ldr	r3, [pc, #428]	; (80004e8 <fsm_automatic_run+0x220>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a6b      	ldr	r2, [pc, #428]	; (80004ec <fsm_automatic_run+0x224>)
 800033e:	fb82 0203 	smull	r0, r2, r2, r3
 8000342:	1092      	asrs	r2, r2, #2
 8000344:	17db      	asrs	r3, r3, #31
 8000346:	1ad5      	subs	r5, r2, r3
 8000348:	4b67      	ldr	r3, [pc, #412]	; (80004e8 <fsm_automatic_run+0x220>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b67      	ldr	r3, [pc, #412]	; (80004ec <fsm_automatic_run+0x224>)
 800034e:	fb83 0302 	smull	r0, r3, r3, r2
 8000352:	1098      	asrs	r0, r3, #2
 8000354:	17d3      	asrs	r3, r2, #31
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4603      	mov	r3, r0
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4403      	add	r3, r0
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	1ad0      	subs	r0, r2, r3
 8000362:	4603      	mov	r3, r0
 8000364:	462a      	mov	r2, r5
 8000366:	4620      	mov	r0, r4
 8000368:	f001 f80a 	bl	8001380 <updateLedBufferVal>
				set_timer(1, green_timer*1000);
 800036c:	4b5d      	ldr	r3, [pc, #372]	; (80004e4 <fsm_automatic_run+0x21c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000374:	fb02 f303 	mul.w	r3, r2, r3
 8000378:	4619      	mov	r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	f001 f984 	bl	8001688 <set_timer>
				set_timer(2, 1000);
 8000380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000384:	2002      	movs	r0, #2
 8000386:	f001 f97f 	bl	8001688 <set_timer>
				set_timer(5, 250);
 800038a:	21fa      	movs	r1, #250	; 0xfa
 800038c:	2005      	movs	r0, #5
 800038e:	f001 f97b 	bl	8001688 <set_timer>
				break;
 8000392:	e29c      	b.n	80008ce <fsm_automatic_run+0x606>

			case REDX_GREENY_AUTO:
				displayLed(REDX_GREENY);
 8000394:	2014      	movs	r0, #20
 8000396:	f001 f80d 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 800039a:	2002      	movs	r0, #2
 800039c:	f001 f994 	bl	80016c8 <is_time_expired>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d03d      	beq.n	8000422 <fsm_automatic_run+0x15a>
				{
					set_timer(2, 1000);
 80003a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003aa:	2002      	movs	r0, #2
 80003ac:	f001 f96c 	bl	8001688 <set_timer>
					counter1--;
 80003b0:	4b4b      	ldr	r3, [pc, #300]	; (80004e0 <fsm_automatic_run+0x218>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	4a4a      	ldr	r2, [pc, #296]	; (80004e0 <fsm_automatic_run+0x218>)
 80003b8:	6013      	str	r3, [r2, #0]
					counter2--;
 80003ba:	4b4b      	ldr	r3, [pc, #300]	; (80004e8 <fsm_automatic_run+0x220>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a49      	ldr	r2, [pc, #292]	; (80004e8 <fsm_automatic_run+0x220>)
 80003c2:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80003c4:	4b46      	ldr	r3, [pc, #280]	; (80004e0 <fsm_automatic_run+0x218>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a48      	ldr	r2, [pc, #288]	; (80004ec <fsm_automatic_run+0x224>)
 80003ca:	fb82 1203 	smull	r1, r2, r2, r3
 80003ce:	1092      	asrs	r2, r2, #2
 80003d0:	17db      	asrs	r3, r3, #31
 80003d2:	1ad4      	subs	r4, r2, r3
 80003d4:	4b42      	ldr	r3, [pc, #264]	; (80004e0 <fsm_automatic_run+0x218>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b44      	ldr	r3, [pc, #272]	; (80004ec <fsm_automatic_run+0x224>)
 80003da:	fb83 1302 	smull	r1, r3, r3, r2
 80003de:	1099      	asrs	r1, r3, #2
 80003e0:	17d3      	asrs	r3, r2, #31
 80003e2:	1ac9      	subs	r1, r1, r3
 80003e4:	460b      	mov	r3, r1
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	440b      	add	r3, r1
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	1ad1      	subs	r1, r2, r3
 80003ee:	4b3e      	ldr	r3, [pc, #248]	; (80004e8 <fsm_automatic_run+0x220>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a3e      	ldr	r2, [pc, #248]	; (80004ec <fsm_automatic_run+0x224>)
 80003f4:	fb82 0203 	smull	r0, r2, r2, r3
 80003f8:	1092      	asrs	r2, r2, #2
 80003fa:	17db      	asrs	r3, r3, #31
 80003fc:	1ad5      	subs	r5, r2, r3
 80003fe:	4b3a      	ldr	r3, [pc, #232]	; (80004e8 <fsm_automatic_run+0x220>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <fsm_automatic_run+0x224>)
 8000404:	fb83 0302 	smull	r0, r3, r3, r2
 8000408:	1098      	asrs	r0, r3, #2
 800040a:	17d3      	asrs	r3, r2, #31
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	4603      	mov	r3, r0
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4403      	add	r3, r0
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	1ad0      	subs	r0, r2, r3
 8000418:	4603      	mov	r3, r0
 800041a:	462a      	mov	r2, r5
 800041c:	4620      	mov	r0, r4
 800041e:	f000 ffaf 	bl	8001380 <updateLedBufferVal>
				}
				//next state
				if(is_time_expired(1))
 8000422:	2001      	movs	r0, #1
 8000424:	f001 f950 	bl	80016c8 <is_time_expired>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d049      	beq.n	80004c2 <fsm_automatic_run+0x1fa>
				{
					status = REDX_YELLOWY_AUTO;
 800042e:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <fsm_automatic_run+0x210>)
 8000430:	2203      	movs	r2, #3
 8000432:	601a      	str	r2, [r3, #0]
					set_timer(1, (red_timer - green_timer)*1000);
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <fsm_automatic_run+0x214>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <fsm_automatic_run+0x21c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	4619      	mov	r1, r3
 8000448:	2001      	movs	r0, #1
 800044a:	f001 f91d 	bl	8001688 <set_timer>
					counter1 = red_timer - green_timer;
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <fsm_automatic_run+0x214>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <fsm_automatic_run+0x21c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <fsm_automatic_run+0x218>)
 800045a:	6013      	str	r3, [r2, #0]
					counter2 = yellow_timer;
 800045c:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <fsm_automatic_run+0x228>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <fsm_automatic_run+0x220>)
 8000462:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <fsm_automatic_run+0x218>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a20      	ldr	r2, [pc, #128]	; (80004ec <fsm_automatic_run+0x224>)
 800046a:	fb82 1203 	smull	r1, r2, r2, r3
 800046e:	1092      	asrs	r2, r2, #2
 8000470:	17db      	asrs	r3, r3, #31
 8000472:	1ad4      	subs	r4, r2, r3
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <fsm_automatic_run+0x218>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <fsm_automatic_run+0x224>)
 800047a:	fb83 1302 	smull	r1, r3, r3, r2
 800047e:	1099      	asrs	r1, r3, #2
 8000480:	17d3      	asrs	r3, r2, #31
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	460b      	mov	r3, r1
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	440b      	add	r3, r1
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1ad1      	subs	r1, r2, r3
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <fsm_automatic_run+0x220>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <fsm_automatic_run+0x224>)
 8000494:	fb82 0203 	smull	r0, r2, r2, r3
 8000498:	1092      	asrs	r2, r2, #2
 800049a:	17db      	asrs	r3, r3, #31
 800049c:	1ad5      	subs	r5, r2, r3
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <fsm_automatic_run+0x220>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <fsm_automatic_run+0x224>)
 80004a4:	fb83 0302 	smull	r0, r3, r3, r2
 80004a8:	1098      	asrs	r0, r3, #2
 80004aa:	17d3      	asrs	r3, r2, #31
 80004ac:	1ac0      	subs	r0, r0, r3
 80004ae:	4603      	mov	r3, r0
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4403      	add	r3, r0
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	1ad0      	subs	r0, r2, r3
 80004b8:	4603      	mov	r3, r0
 80004ba:	462a      	mov	r2, r5
 80004bc:	4620      	mov	r0, r4
 80004be:	f000 ff5f 	bl	8001380 <updateLedBufferVal>
				}
				// mode 2
				if(isButtonPressed(0))
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff fe52 	bl	800016c <isButtonPressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 81f8 	beq.w	80008c0 <fsm_automatic_run+0x5f8>
				{
					switchMode2();
 80004d0:	f000 fa0c 	bl	80008ec <switchMode2>
				}

				break;
 80004d4:	e1f4      	b.n	80008c0 <fsm_automatic_run+0x5f8>
 80004d6:	bf00      	nop
 80004d8:	200000a8 	.word	0x200000a8
 80004dc:	20000054 	.word	0x20000054
 80004e0:	200000b0 	.word	0x200000b0
 80004e4:	2000005c 	.word	0x2000005c
 80004e8:	200000b4 	.word	0x200000b4
 80004ec:	66666667 	.word	0x66666667
 80004f0:	20000058 	.word	0x20000058

			case REDX_YELLOWY_AUTO:
				displayLed(REDX_YELLOWY);
 80004f4:	2015      	movs	r0, #21
 80004f6:	f000 ff5d 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 80004fa:	2002      	movs	r0, #2
 80004fc:	f001 f8e4 	bl	80016c8 <is_time_expired>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d03d      	beq.n	8000582 <fsm_automatic_run+0x2ba>
				{
					set_timer(2,1000);
 8000506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800050a:	2002      	movs	r0, #2
 800050c:	f001 f8bc 	bl	8001688 <set_timer>
					counter1--;
 8000510:	4b96      	ldr	r3, [pc, #600]	; (800076c <fsm_automatic_run+0x4a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3b01      	subs	r3, #1
 8000516:	4a95      	ldr	r2, [pc, #596]	; (800076c <fsm_automatic_run+0x4a4>)
 8000518:	6013      	str	r3, [r2, #0]
					counter2--;
 800051a:	4b95      	ldr	r3, [pc, #596]	; (8000770 <fsm_automatic_run+0x4a8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a93      	ldr	r2, [pc, #588]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000522:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 8000524:	4b91      	ldr	r3, [pc, #580]	; (800076c <fsm_automatic_run+0x4a4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a92      	ldr	r2, [pc, #584]	; (8000774 <fsm_automatic_run+0x4ac>)
 800052a:	fb82 1203 	smull	r1, r2, r2, r3
 800052e:	1092      	asrs	r2, r2, #2
 8000530:	17db      	asrs	r3, r3, #31
 8000532:	1ad4      	subs	r4, r2, r3
 8000534:	4b8d      	ldr	r3, [pc, #564]	; (800076c <fsm_automatic_run+0x4a4>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b8e      	ldr	r3, [pc, #568]	; (8000774 <fsm_automatic_run+0x4ac>)
 800053a:	fb83 1302 	smull	r1, r3, r3, r2
 800053e:	1099      	asrs	r1, r3, #2
 8000540:	17d3      	asrs	r3, r2, #31
 8000542:	1ac9      	subs	r1, r1, r3
 8000544:	460b      	mov	r3, r1
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	440b      	add	r3, r1
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	1ad1      	subs	r1, r2, r3
 800054e:	4b88      	ldr	r3, [pc, #544]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a88      	ldr	r2, [pc, #544]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000554:	fb82 0203 	smull	r0, r2, r2, r3
 8000558:	1092      	asrs	r2, r2, #2
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad5      	subs	r5, r2, r3
 800055e:	4b84      	ldr	r3, [pc, #528]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b84      	ldr	r3, [pc, #528]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000564:	fb83 0302 	smull	r0, r3, r3, r2
 8000568:	1098      	asrs	r0, r3, #2
 800056a:	17d3      	asrs	r3, r2, #31
 800056c:	1ac0      	subs	r0, r0, r3
 800056e:	4603      	mov	r3, r0
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4403      	add	r3, r0
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	1ad0      	subs	r0, r2, r3
 8000578:	4603      	mov	r3, r0
 800057a:	462a      	mov	r2, r5
 800057c:	4620      	mov	r0, r4
 800057e:	f000 feff 	bl	8001380 <updateLedBufferVal>
				}
				// next state
				if(is_time_expired(1))
 8000582:	2001      	movs	r0, #1
 8000584:	f001 f8a0 	bl	80016c8 <is_time_expired>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d043      	beq.n	8000616 <fsm_automatic_run+0x34e>
				{
					status = GREENX_REDY_AUTO;
 800058e:	4b7a      	ldr	r3, [pc, #488]	; (8000778 <fsm_automatic_run+0x4b0>)
 8000590:	2204      	movs	r2, #4
 8000592:	601a      	str	r2, [r3, #0]
					set_timer(1, green_timer*1000);
 8000594:	4b79      	ldr	r3, [pc, #484]	; (800077c <fsm_automatic_run+0x4b4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 f870 	bl	8001688 <set_timer>
					counter1 = red_timer;
 80005a8:	4b75      	ldr	r3, [pc, #468]	; (8000780 <fsm_automatic_run+0x4b8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a6f      	ldr	r2, [pc, #444]	; (800076c <fsm_automatic_run+0x4a4>)
 80005ae:	6013      	str	r3, [r2, #0]
					counter2 = green_timer;
 80005b0:	4b72      	ldr	r3, [pc, #456]	; (800077c <fsm_automatic_run+0x4b4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a6e      	ldr	r2, [pc, #440]	; (8000770 <fsm_automatic_run+0x4a8>)
 80005b6:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80005b8:	4b6c      	ldr	r3, [pc, #432]	; (800076c <fsm_automatic_run+0x4a4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a6d      	ldr	r2, [pc, #436]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005be:	fb82 1203 	smull	r1, r2, r2, r3
 80005c2:	1092      	asrs	r2, r2, #2
 80005c4:	17db      	asrs	r3, r3, #31
 80005c6:	1ad4      	subs	r4, r2, r3
 80005c8:	4b68      	ldr	r3, [pc, #416]	; (800076c <fsm_automatic_run+0x4a4>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b69      	ldr	r3, [pc, #420]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005ce:	fb83 1302 	smull	r1, r3, r3, r2
 80005d2:	1099      	asrs	r1, r3, #2
 80005d4:	17d3      	asrs	r3, r2, #31
 80005d6:	1ac9      	subs	r1, r1, r3
 80005d8:	460b      	mov	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1ad1      	subs	r1, r2, r3
 80005e2:	4b63      	ldr	r3, [pc, #396]	; (8000770 <fsm_automatic_run+0x4a8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a63      	ldr	r2, [pc, #396]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005e8:	fb82 0203 	smull	r0, r2, r2, r3
 80005ec:	1092      	asrs	r2, r2, #2
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad5      	subs	r5, r2, r3
 80005f2:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <fsm_automatic_run+0x4a8>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b5f      	ldr	r3, [pc, #380]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005f8:	fb83 0302 	smull	r0, r3, r3, r2
 80005fc:	1098      	asrs	r0, r3, #2
 80005fe:	17d3      	asrs	r3, r2, #31
 8000600:	1ac0      	subs	r0, r0, r3
 8000602:	4603      	mov	r3, r0
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4403      	add	r3, r0
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	1ad0      	subs	r0, r2, r3
 800060c:	4603      	mov	r3, r0
 800060e:	462a      	mov	r2, r5
 8000610:	4620      	mov	r0, r4
 8000612:	f000 feb5 	bl	8001380 <updateLedBufferVal>
				}
				//mode 2
				if(isButtonPressed(0))
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff fda8 	bl	800016c <isButtonPressed>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8150 	beq.w	80008c4 <fsm_automatic_run+0x5fc>
				{
					switchMode2();
 8000624:	f000 f962 	bl	80008ec <switchMode2>
				}
				break;
 8000628:	e14c      	b.n	80008c4 <fsm_automatic_run+0x5fc>
			case GREENX_REDY_AUTO:
				displayLed(GREENX_REDY);
 800062a:	2016      	movs	r0, #22
 800062c:	f000 fec2 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000630:	2002      	movs	r0, #2
 8000632:	f001 f849 	bl	80016c8 <is_time_expired>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d03d      	beq.n	80006b8 <fsm_automatic_run+0x3f0>
				{
					set_timer(2,1000);
 800063c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000640:	2002      	movs	r0, #2
 8000642:	f001 f821 	bl	8001688 <set_timer>
					counter1--;
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <fsm_automatic_run+0x4a4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a47      	ldr	r2, [pc, #284]	; (800076c <fsm_automatic_run+0x4a4>)
 800064e:	6013      	str	r3, [r2, #0]
					counter2--;
 8000650:	4b47      	ldr	r3, [pc, #284]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000658:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <fsm_automatic_run+0x4a4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a45      	ldr	r2, [pc, #276]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000660:	fb82 1203 	smull	r1, r2, r2, r3
 8000664:	1092      	asrs	r2, r2, #2
 8000666:	17db      	asrs	r3, r3, #31
 8000668:	1ad4      	subs	r4, r2, r3
 800066a:	4b40      	ldr	r3, [pc, #256]	; (800076c <fsm_automatic_run+0x4a4>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000670:	fb83 1302 	smull	r1, r3, r3, r2
 8000674:	1099      	asrs	r1, r3, #2
 8000676:	17d3      	asrs	r3, r2, #31
 8000678:	1ac9      	subs	r1, r1, r3
 800067a:	460b      	mov	r3, r1
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	1ad1      	subs	r1, r2, r3
 8000684:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a3a      	ldr	r2, [pc, #232]	; (8000774 <fsm_automatic_run+0x4ac>)
 800068a:	fb82 0203 	smull	r0, r2, r2, r3
 800068e:	1092      	asrs	r2, r2, #2
 8000690:	17db      	asrs	r3, r3, #31
 8000692:	1ad5      	subs	r5, r2, r3
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <fsm_automatic_run+0x4ac>)
 800069a:	fb83 0302 	smull	r0, r3, r3, r2
 800069e:	1098      	asrs	r0, r3, #2
 80006a0:	17d3      	asrs	r3, r2, #31
 80006a2:	1ac0      	subs	r0, r0, r3
 80006a4:	4603      	mov	r3, r0
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4403      	add	r3, r0
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1ad0      	subs	r0, r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	462a      	mov	r2, r5
 80006b2:	4620      	mov	r0, r4
 80006b4:	f000 fe64 	bl	8001380 <updateLedBufferVal>
				}
				// next state
				if(is_time_expired(1))
 80006b8:	2001      	movs	r0, #1
 80006ba:	f001 f805 	bl	80016c8 <is_time_expired>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d049      	beq.n	8000758 <fsm_automatic_run+0x490>
				{
					status = YELLOWX_REDY_AUTO;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <fsm_automatic_run+0x4b0>)
 80006c6:	2205      	movs	r2, #5
 80006c8:	601a      	str	r2, [r3, #0]
					set_timer(1, (red_timer - green_timer)*1000);
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <fsm_automatic_run+0x4b8>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <fsm_automatic_run+0x4b4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 ffd2 	bl	8001688 <set_timer>
					counter1 = red_timer - green_timer;
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <fsm_automatic_run+0x4b8>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <fsm_automatic_run+0x4b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <fsm_automatic_run+0x4a4>)
 80006f0:	6013      	str	r3, [r2, #0]
					counter2 = yellow_timer;
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <fsm_automatic_run+0x4bc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <fsm_automatic_run+0x4a8>)
 80006f8:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <fsm_automatic_run+0x4a4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	1092      	asrs	r2, r2, #2
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad4      	subs	r4, r2, r3
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <fsm_automatic_run+0x4a4>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000710:	fb83 1302 	smull	r1, r3, r3, r2
 8000714:	1099      	asrs	r1, r3, #2
 8000716:	17d3      	asrs	r3, r2, #31
 8000718:	1ac9      	subs	r1, r1, r3
 800071a:	460b      	mov	r3, r1
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	1ad1      	subs	r1, r2, r3
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <fsm_automatic_run+0x4ac>)
 800072a:	fb82 0203 	smull	r0, r2, r2, r3
 800072e:	1092      	asrs	r2, r2, #2
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad5      	subs	r5, r2, r3
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <fsm_automatic_run+0x4ac>)
 800073a:	fb83 0302 	smull	r0, r3, r3, r2
 800073e:	1098      	asrs	r0, r3, #2
 8000740:	17d3      	asrs	r3, r2, #31
 8000742:	1ac0      	subs	r0, r0, r3
 8000744:	4603      	mov	r3, r0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4403      	add	r3, r0
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	1ad0      	subs	r0, r2, r3
 800074e:	4603      	mov	r3, r0
 8000750:	462a      	mov	r2, r5
 8000752:	4620      	mov	r0, r4
 8000754:	f000 fe14 	bl	8001380 <updateLedBufferVal>
				}
				//mode 2
				if(isButtonPressed(0))
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff fd07 	bl	800016c <isButtonPressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	f000 80b1 	beq.w	80008c8 <fsm_automatic_run+0x600>
				{
					switchMode2();
 8000766:	f000 f8c1 	bl	80008ec <switchMode2>
				}
				break;
 800076a:	e0ad      	b.n	80008c8 <fsm_automatic_run+0x600>
 800076c:	200000b0 	.word	0x200000b0
 8000770:	200000b4 	.word	0x200000b4
 8000774:	66666667 	.word	0x66666667
 8000778:	200000a8 	.word	0x200000a8
 800077c:	2000005c 	.word	0x2000005c
 8000780:	20000054 	.word	0x20000054
 8000784:	20000058 	.word	0x20000058

			case YELLOWX_REDY_AUTO:
				displayLed(YELLOWX_REDY);
 8000788:	2017      	movs	r0, #23
 800078a:	f000 fe13 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 800078e:	2002      	movs	r0, #2
 8000790:	f000 ff9a 	bl	80016c8 <is_time_expired>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d03d      	beq.n	8000816 <fsm_automatic_run+0x54e>
				{
					set_timer(2,1000);
 800079a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800079e:	2002      	movs	r0, #2
 80007a0:	f000 ff72 	bl	8001688 <set_timer>
					counter1--;
 80007a4:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007ac:	6013      	str	r3, [r2, #0]
					counter2--;
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <fsm_automatic_run+0x610>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	4a48      	ldr	r2, [pc, #288]	; (80008d8 <fsm_automatic_run+0x610>)
 80007b6:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80007b8:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a47      	ldr	r2, [pc, #284]	; (80008dc <fsm_automatic_run+0x614>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1092      	asrs	r2, r2, #2
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad4      	subs	r4, r2, r3
 80007c8:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b43      	ldr	r3, [pc, #268]	; (80008dc <fsm_automatic_run+0x614>)
 80007ce:	fb83 1302 	smull	r1, r3, r3, r2
 80007d2:	1099      	asrs	r1, r3, #2
 80007d4:	17d3      	asrs	r3, r2, #31
 80007d6:	1ac9      	subs	r1, r1, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1ad1      	subs	r1, r2, r3
 80007e2:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <fsm_automatic_run+0x610>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a3d      	ldr	r2, [pc, #244]	; (80008dc <fsm_automatic_run+0x614>)
 80007e8:	fb82 0203 	smull	r0, r2, r2, r3
 80007ec:	1092      	asrs	r2, r2, #2
 80007ee:	17db      	asrs	r3, r3, #31
 80007f0:	1ad5      	subs	r5, r2, r3
 80007f2:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <fsm_automatic_run+0x610>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <fsm_automatic_run+0x614>)
 80007f8:	fb83 0302 	smull	r0, r3, r3, r2
 80007fc:	1098      	asrs	r0, r3, #2
 80007fe:	17d3      	asrs	r3, r2, #31
 8000800:	1ac0      	subs	r0, r0, r3
 8000802:	4603      	mov	r3, r0
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4403      	add	r3, r0
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	1ad0      	subs	r0, r2, r3
 800080c:	4603      	mov	r3, r0
 800080e:	462a      	mov	r2, r5
 8000810:	4620      	mov	r0, r4
 8000812:	f000 fdb5 	bl	8001380 <updateLedBufferVal>
				}
				// next state
				if(is_time_expired(1))
 8000816:	2001      	movs	r0, #1
 8000818:	f000 ff56 	bl	80016c8 <is_time_expired>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d043      	beq.n	80008aa <fsm_automatic_run+0x5e2>
				{
					status = REDX_GREENY_AUTO;
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <fsm_automatic_run+0x618>)
 8000824:	2202      	movs	r2, #2
 8000826:	601a      	str	r2, [r3, #0]
					set_timer(1, green_timer*1000);
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <fsm_automatic_run+0x61c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	4619      	mov	r1, r3
 8000836:	2001      	movs	r0, #1
 8000838:	f000 ff26 	bl	8001688 <set_timer>
					counter1 = red_timer;
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <fsm_automatic_run+0x620>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <fsm_automatic_run+0x60c>)
 8000842:	6013      	str	r3, [r2, #0]
					counter2 = green_timer;
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <fsm_automatic_run+0x61c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <fsm_automatic_run+0x610>)
 800084a:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <fsm_automatic_run+0x60c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <fsm_automatic_run+0x614>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1092      	asrs	r2, r2, #2
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad4      	subs	r4, r2, r3
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <fsm_automatic_run+0x60c>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <fsm_automatic_run+0x614>)
 8000862:	fb83 1302 	smull	r1, r3, r3, r2
 8000866:	1099      	asrs	r1, r3, #2
 8000868:	17d3      	asrs	r3, r2, #31
 800086a:	1ac9      	subs	r1, r1, r3
 800086c:	460b      	mov	r3, r1
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	1ad1      	subs	r1, r2, r3
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <fsm_automatic_run+0x610>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <fsm_automatic_run+0x614>)
 800087c:	fb82 0203 	smull	r0, r2, r2, r3
 8000880:	1092      	asrs	r2, r2, #2
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad5      	subs	r5, r2, r3
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <fsm_automatic_run+0x610>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <fsm_automatic_run+0x614>)
 800088c:	fb83 0302 	smull	r0, r3, r3, r2
 8000890:	1098      	asrs	r0, r3, #2
 8000892:	17d3      	asrs	r3, r2, #31
 8000894:	1ac0      	subs	r0, r0, r3
 8000896:	4603      	mov	r3, r0
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4403      	add	r3, r0
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	1ad0      	subs	r0, r2, r3
 80008a0:	4603      	mov	r3, r0
 80008a2:	462a      	mov	r2, r5
 80008a4:	4620      	mov	r0, r4
 80008a6:	f000 fd6b 	bl	8001380 <updateLedBufferVal>

				}
				//mode 2
				if(isButtonPressed(0))
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fc5e 	bl	800016c <isButtonPressed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00a      	beq.n	80008cc <fsm_automatic_run+0x604>
				{
					switchMode2();
 80008b6:	f000 f819 	bl	80008ec <switchMode2>
				}
				break;
 80008ba:	e007      	b.n	80008cc <fsm_automatic_run+0x604>

			default : break;
 80008bc:	bf00      	nop
 80008be:	e006      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008c0:	bf00      	nop
 80008c2:	e004      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008c4:	bf00      	nop
 80008c6:	e002      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008c8:	bf00      	nop
 80008ca:	e000      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008cc:	bf00      	nop
		}
	}
 80008ce:	bf00      	nop
 80008d0:	bdb0      	pop	{r4, r5, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000b0 	.word	0x200000b0
 80008d8:	200000b4 	.word	0x200000b4
 80008dc:	66666667 	.word	0x66666667
 80008e0:	200000a8 	.word	0x200000a8
 80008e4:	2000005c 	.word	0x2000005c
 80008e8:	20000054 	.word	0x20000054

080008ec <switchMode2>:


#include"fsm_manual.h"
	int timer_man = 0;
	void switchMode2()
		{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
			status = RED_MAN;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <switchMode2+0x68>)
 80008f2:	220a      	movs	r2, #10
 80008f4:	601a      	str	r2, [r3, #0]
			counter1 = red_timer;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <switchMode2+0x6c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <switchMode2+0x70>)
 80008fc:	6013      	str	r3, [r2, #0]
			set_timer(2,1000);
 80008fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000902:	2002      	movs	r0, #2
 8000904:	f000 fec0 	bl	8001688 <set_timer>
			set_timer(4,250);
 8000908:	21fa      	movs	r1, #250	; 0xfa
 800090a:	2004      	movs	r0, #4
 800090c:	f000 febc 	bl	8001688 <set_timer>
			updateLedBufferVal(counter1/10,counter1%10, counter1/10, 2);
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <switchMode2+0x70>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <switchMode2+0x74>)
 8000916:	fb82 1203 	smull	r1, r2, r2, r3
 800091a:	1092      	asrs	r2, r2, #2
 800091c:	17db      	asrs	r3, r3, #31
 800091e:	1ad0      	subs	r0, r2, r3
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <switchMode2+0x70>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <switchMode2+0x74>)
 8000926:	fb83 1302 	smull	r1, r3, r3, r2
 800092a:	1099      	asrs	r1, r3, #2
 800092c:	17d3      	asrs	r3, r2, #31
 800092e:	1ac9      	subs	r1, r1, r3
 8000930:	460b      	mov	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	1ad1      	subs	r1, r2, r3
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <switchMode2+0x70>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <switchMode2+0x74>)
 8000940:	fb82 c203 	smull	ip, r2, r2, r3
 8000944:	1092      	asrs	r2, r2, #2
 8000946:	17db      	asrs	r3, r3, #31
 8000948:	1ad2      	subs	r2, r2, r3
 800094a:	2302      	movs	r3, #2
 800094c:	f000 fd18 	bl	8001380 <updateLedBufferVal>
		}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000a8 	.word	0x200000a8
 8000958:	20000054 	.word	0x20000054
 800095c:	200000b0 	.word	0x200000b0
 8000960:	66666667 	.word	0x66666667

08000964 <switchMode3>:

	void switchMode3()
		{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
			status = YELLOW_MAN;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <switchMode3+0x68>)
 800096a:	220b      	movs	r2, #11
 800096c:	601a      	str	r2, [r3, #0]
			counter1 = yellow_timer;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <switchMode3+0x6c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <switchMode3+0x70>)
 8000974:	6013      	str	r3, [r2, #0]
			set_timer(2,1000);
 8000976:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800097a:	2002      	movs	r0, #2
 800097c:	f000 fe84 	bl	8001688 <set_timer>
			set_timer(4,250);
 8000980:	21fa      	movs	r1, #250	; 0xfa
 8000982:	2004      	movs	r0, #4
 8000984:	f000 fe80 	bl	8001688 <set_timer>
			updateLedBufferVal(counter1/10, counter1%10, counter1/10, 3);
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <switchMode3+0x70>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <switchMode3+0x74>)
 800098e:	fb82 1203 	smull	r1, r2, r2, r3
 8000992:	1092      	asrs	r2, r2, #2
 8000994:	17db      	asrs	r3, r3, #31
 8000996:	1ad0      	subs	r0, r2, r3
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <switchMode3+0x70>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <switchMode3+0x74>)
 800099e:	fb83 1302 	smull	r1, r3, r3, r2
 80009a2:	1099      	asrs	r1, r3, #2
 80009a4:	17d3      	asrs	r3, r2, #31
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	1ad1      	subs	r1, r2, r3
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <switchMode3+0x70>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <switchMode3+0x74>)
 80009b8:	fb82 c203 	smull	ip, r2, r2, r3
 80009bc:	1092      	asrs	r2, r2, #2
 80009be:	17db      	asrs	r3, r3, #31
 80009c0:	1ad2      	subs	r2, r2, r3
 80009c2:	2303      	movs	r3, #3
 80009c4:	f000 fcdc 	bl	8001380 <updateLedBufferVal>
		}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000a8 	.word	0x200000a8
 80009d0:	20000058 	.word	0x20000058
 80009d4:	200000b0 	.word	0x200000b0
 80009d8:	66666667 	.word	0x66666667

080009dc <switchMode4>:
	void switchMode4()
		{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
			status = GREEN_MAN;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <switchMode4+0x68>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
			counter1 = green_timer;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <switchMode4+0x6c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <switchMode4+0x70>)
 80009ec:	6013      	str	r3, [r2, #0]
			set_timer(2,1000);
 80009ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f2:	2002      	movs	r0, #2
 80009f4:	f000 fe48 	bl	8001688 <set_timer>
			set_timer(4,250);
 80009f8:	21fa      	movs	r1, #250	; 0xfa
 80009fa:	2004      	movs	r0, #4
 80009fc:	f000 fe44 	bl	8001688 <set_timer>
			updateLedBufferVal(counter1/10, counter1%10, counter1/10, 4);
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <switchMode4+0x70>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <switchMode4+0x74>)
 8000a06:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0a:	1092      	asrs	r2, r2, #2
 8000a0c:	17db      	asrs	r3, r3, #31
 8000a0e:	1ad0      	subs	r0, r2, r3
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <switchMode4+0x70>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <switchMode4+0x74>)
 8000a16:	fb83 1302 	smull	r1, r3, r3, r2
 8000a1a:	1099      	asrs	r1, r3, #2
 8000a1c:	17d3      	asrs	r3, r2, #31
 8000a1e:	1ac9      	subs	r1, r1, r3
 8000a20:	460b      	mov	r3, r1
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	1ad1      	subs	r1, r2, r3
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <switchMode4+0x70>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <switchMode4+0x74>)
 8000a30:	fb82 c203 	smull	ip, r2, r2, r3
 8000a34:	1092      	asrs	r2, r2, #2
 8000a36:	17db      	asrs	r3, r3, #31
 8000a38:	1ad2      	subs	r2, r2, r3
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	f000 fca0 	bl	8001380 <updateLedBufferVal>
		}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000a8 	.word	0x200000a8
 8000a48:	2000005c 	.word	0x2000005c
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	66666667 	.word	0x66666667

08000a54 <fsm_manual_run>:

	void fsm_manual_run()
	{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
		switch(status)
 8000a58:	4baf      	ldr	r3, [pc, #700]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b0a      	subs	r3, #10
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	f200 8208 	bhi.w	8000e74 <fsm_manual_run+0x420>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <fsm_manual_run+0x18>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a85 	.word	0x08000a85
 8000a70:	08000bd5 	.word	0x08000bd5
 8000a74:	08000d35 	.word	0x08000d35
 8000a78:	08000b41 	.word	0x08000b41
 8000a7c:	08000c83 	.word	0x08000c83
 8000a80:	08000de3 	.word	0x08000de3
		{
			case RED_MAN:
				displayLed(RED_MAN);
 8000a84:	200a      	movs	r0, #10
 8000a86:	f000 fc95 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 fe1c 	bl	80016c8 <is_time_expired>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d024      	beq.n	8000ae0 <fsm_manual_run+0x8c>
				{
					set_timer(2, 1000);
 8000a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 fdf4 	bl	8001688 <set_timer>
					updateLedBufferVal(counter1/10, counter1%10, counter1/10, 2);
 8000aa0:	4b9e      	ldr	r3, [pc, #632]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a9e      	ldr	r2, [pc, #632]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aaa:	1092      	asrs	r2, r2, #2
 8000aac:	17db      	asrs	r3, r3, #31
 8000aae:	1ad0      	subs	r0, r2, r3
 8000ab0:	4b9a      	ldr	r3, [pc, #616]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b9a      	ldr	r3, [pc, #616]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000ab6:	fb83 1302 	smull	r1, r3, r3, r2
 8000aba:	1099      	asrs	r1, r3, #2
 8000abc:	17d3      	asrs	r3, r2, #31
 8000abe:	1ac9      	subs	r1, r1, r3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	1ad1      	subs	r1, r2, r3
 8000aca:	4b94      	ldr	r3, [pc, #592]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a94      	ldr	r2, [pc, #592]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000ad0:	fb82 c203 	smull	ip, r2, r2, r3
 8000ad4:	1092      	asrs	r2, r2, #2
 8000ad6:	17db      	asrs	r3, r3, #31
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	2302      	movs	r3, #2
 8000adc:	f000 fc50 	bl	8001380 <updateLedBufferVal>
				}
				//mode 3
				if(isButtonPressed(0))
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fb43 	bl	800016c <isButtonPressed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <fsm_manual_run+0x9c>
				{
					switchMode3();
 8000aec:	f7ff ff3a 	bl	8000964 <switchMode3>
				}
				// next state
				if(isButtonPressed(1))
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fb3b 	bl	800016c <isButtonPressed>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 81bd 	beq.w	8000e78 <fsm_manual_run+0x424>
				{
					status = RED_MAN_MODIFY;
 8000afe:	4b86      	ldr	r3, [pc, #536]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000b00:	220d      	movs	r2, #13
 8000b02:	601a      	str	r2, [r3, #0]
					timer_man = red_timer;
 8000b04:	4b87      	ldr	r3, [pc, #540]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a87      	ldr	r2, [pc, #540]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b0a:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 2);
 8000b0c:	4b86      	ldr	r3, [pc, #536]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a83      	ldr	r2, [pc, #524]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b12:	fb82 1203 	smull	r1, r2, r2, r3
 8000b16:	1092      	asrs	r2, r2, #2
 8000b18:	17db      	asrs	r3, r3, #31
 8000b1a:	1ad0      	subs	r0, r2, r3
 8000b1c:	4b82      	ldr	r3, [pc, #520]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b7f      	ldr	r3, [pc, #508]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b22:	fb83 1302 	smull	r1, r3, r3, r2
 8000b26:	1099      	asrs	r1, r3, #2
 8000b28:	17d3      	asrs	r3, r2, #31
 8000b2a:	1ac9      	subs	r1, r1, r3
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	1ad1      	subs	r1, r2, r3
 8000b36:	2302      	movs	r3, #2
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f000 fc21 	bl	8001380 <updateLedBufferVal>
				}
				break;
 8000b3e:	e19b      	b.n	8000e78 <fsm_manual_run+0x424>

			case RED_MAN_MODIFY:
				displayLed(RED_MAN);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f000 fc37 	bl	80013b4 <displayLed>
				// back mode 2
				if(isButtonPressed(0))
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fb10 	bl	800016c <isButtonPressed>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <fsm_manual_run+0x104>
				{
					status = RED_MAN;
 8000b52:	4b71      	ldr	r3, [pc, #452]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	601a      	str	r2, [r3, #0]
				}
				// modify
				if(isButtonPressed(1))
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fb07 	bl	800016c <isButtonPressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d024      	beq.n	8000bae <fsm_manual_run+0x15a>
				{
					timer_man++;
 8000b64:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a6f      	ldr	r2, [pc, #444]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b6c:	6013      	str	r3, [r2, #0]
					if(timer_man > 99) timer_man = 1;
 8000b6e:	4b6e      	ldr	r3, [pc, #440]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b63      	cmp	r3, #99	; 0x63
 8000b74:	dd02      	ble.n	8000b7c <fsm_manual_run+0x128>
 8000b76:	4b6c      	ldr	r3, [pc, #432]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 2);
 8000b7c:	4b6a      	ldr	r3, [pc, #424]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a67      	ldr	r2, [pc, #412]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b82:	fb82 1203 	smull	r1, r2, r2, r3
 8000b86:	1092      	asrs	r2, r2, #2
 8000b88:	17db      	asrs	r3, r3, #31
 8000b8a:	1ad0      	subs	r0, r2, r3
 8000b8c:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b63      	ldr	r3, [pc, #396]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b92:	fb83 1302 	smull	r1, r3, r3, r2
 8000b96:	1099      	asrs	r1, r3, #2
 8000b98:	17d3      	asrs	r3, r2, #31
 8000b9a:	1ac9      	subs	r1, r1, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad1      	subs	r1, r2, r3
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f000 fbe9 	bl	8001380 <updateLedBufferVal>
				}
				// save value
				if(isButtonPressed(2))
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff fadc 	bl	800016c <isButtonPressed>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 8160 	beq.w	8000e7c <fsm_manual_run+0x428>
				{
					red_timer = timer_man;
 8000bbc:	4b5a      	ldr	r3, [pc, #360]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a58      	ldr	r2, [pc, #352]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000bc2:	6013      	str	r3, [r2, #0]
					green_timer = red_timer - yellow_timer;
 8000bc4:	4b57      	ldr	r3, [pc, #348]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <fsm_manual_run+0x2dc>)
 8000bd0:	6013      	str	r3, [r2, #0]

				}
				break;
 8000bd2:	e153      	b.n	8000e7c <fsm_manual_run+0x428>

			case YELLOW_MAN:
				displayLed(YELLOW_MAN);
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f000 fbed 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f000 fd74 	bl	80016c8 <is_time_expired>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01d      	beq.n	8000c22 <fsm_manual_run+0x1ce>
				{
					set_timer(2, 1000);
 8000be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bea:	2002      	movs	r0, #2
 8000bec:	f000 fd4c 	bl	8001688 <set_timer>
					updateLedBufferVal(counter1/10, counter1%10, 0, 3);
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000bf6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfa:	1092      	asrs	r2, r2, #2
 8000bfc:	17db      	asrs	r3, r3, #31
 8000bfe:	1ad0      	subs	r0, r2, r3
 8000c00:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000c06:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0a:	1099      	asrs	r1, r3, #2
 8000c0c:	17d3      	asrs	r3, r2, #31
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	1ad1      	subs	r1, r2, r3
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f000 fbaf 	bl	8001380 <updateLedBufferVal>
				}
				// mode 4
				if(isButtonPressed(0))
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff faa2 	bl	800016c <isButtonPressed>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <fsm_manual_run+0x1de>
				{
					switchMode4();
 8000c2e:	f7ff fed5 	bl	80009dc <switchMode4>
				}
				//next state
				if(isButtonPressed(1))
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fa9a 	bl	800016c <isButtonPressed>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8120 	beq.w	8000e80 <fsm_manual_run+0x42c>
				{
					status = YELLOW_MAN_MODIFY;
 8000c40:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000c42:	220e      	movs	r2, #14
 8000c44:	601a      	str	r2, [r3, #0]
					timer_man = yellow_timer;
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000c4c:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 3);
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1092      	asrs	r2, r2, #2
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad0      	subs	r0, r2, r3
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000c64:	fb83 1302 	smull	r1, r3, r3, r2
 8000c68:	1099      	asrs	r1, r3, #2
 8000c6a:	17d3      	asrs	r3, r2, #31
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	460b      	mov	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	1ad1      	subs	r1, r2, r3
 8000c78:	2303      	movs	r3, #3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f000 fb80 	bl	8001380 <updateLedBufferVal>
				}
				break;
 8000c80:	e0fe      	b.n	8000e80 <fsm_manual_run+0x42c>

			case YELLOW_MAN_MODIFY:
				displayLed(YELLOW_MAN);
 8000c82:	200b      	movs	r0, #11
 8000c84:	f000 fb96 	bl	80013b4 <displayLed>
				//back mode 3
				if(isButtonPressed(0))
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fa6f 	bl	800016c <isButtonPressed>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <fsm_manual_run+0x246>
				{
					status = YELLOW_MAN;
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000c96:	220b      	movs	r2, #11
 8000c98:	601a      	str	r2, [r3, #0]
				}
				// modify
				if(isButtonPressed(1))
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fa66 	bl	800016c <isButtonPressed>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d024      	beq.n	8000cf0 <fsm_manual_run+0x29c>
				{
					timer_man++;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cae:	6013      	str	r3, [r2, #0]
					if(timer_man > 99) timer_man = 1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b63      	cmp	r3, #99	; 0x63
 8000cb6:	dd02      	ble.n	8000cbe <fsm_manual_run+0x26a>
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 3);
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc8:	1092      	asrs	r2, r2, #2
 8000cca:	17db      	asrs	r3, r3, #31
 8000ccc:	1ad0      	subs	r0, r2, r3
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000cd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd8:	1099      	asrs	r1, r3, #2
 8000cda:	17d3      	asrs	r3, r2, #31
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	1ad1      	subs	r1, r2, r3
 8000ce8:	2303      	movs	r3, #3
 8000cea:	2200      	movs	r2, #0
 8000cec:	f000 fb48 	bl	8001380 <updateLedBufferVal>
				}
				// save value
				if(isButtonPressed(2))
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f7ff fa3b 	bl	800016c <isButtonPressed>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80c3 	beq.w	8000e84 <fsm_manual_run+0x430>
				{
					yellow_timer = timer_man;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000d04:	6013      	str	r3, [r2, #0]
					green_timer = red_timer - yellow_timer;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <fsm_manual_run+0x2dc>)
 8000d12:	6013      	str	r3, [r2, #0]
				}
				break;
 8000d14:	e0b6      	b.n	8000e84 <fsm_manual_run+0x430>
 8000d16:	bf00      	nop
 8000d18:	200000a8 	.word	0x200000a8
 8000d1c:	200000b0 	.word	0x200000b0
 8000d20:	66666667 	.word	0x66666667
 8000d24:	20000054 	.word	0x20000054
 8000d28:	200000a4 	.word	0x200000a4
 8000d2c:	20000058 	.word	0x20000058
 8000d30:	2000005c 	.word	0x2000005c

			case GREEN_MAN:
				displayLed(GREEN_MAN);
 8000d34:	200c      	movs	r0, #12
 8000d36:	f000 fb3d 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f000 fcc4 	bl	80016c8 <is_time_expired>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01d      	beq.n	8000d82 <fsm_manual_run+0x32e>
				{
					set_timer(2, 1000);
 8000d46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 fc9c 	bl	8001688 <set_timer>
					updateLedBufferVal(counter1/10, counter1%10, 0, 4);
 8000d50:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <fsm_manual_run+0x440>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a50      	ldr	r2, [pc, #320]	; (8000e98 <fsm_manual_run+0x444>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	1092      	asrs	r2, r2, #2
 8000d5c:	17db      	asrs	r3, r3, #31
 8000d5e:	1ad0      	subs	r0, r2, r3
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <fsm_manual_run+0x440>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b4c      	ldr	r3, [pc, #304]	; (8000e98 <fsm_manual_run+0x444>)
 8000d66:	fb83 1302 	smull	r1, r3, r3, r2
 8000d6a:	1099      	asrs	r1, r3, #2
 8000d6c:	17d3      	asrs	r3, r2, #31
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad1      	subs	r1, r2, r3
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f000 faff 	bl	8001380 <updateLedBufferVal>
				}
				// mode INIT
				if(isButtonPressed(0))
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff f9f2 	bl	800016c <isButtonPressed>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <fsm_manual_run+0x340>
				{
					status = INIT;
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <fsm_manual_run+0x448>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
				}
				// next state
				if(isButtonPressed(1))
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff f9e9 	bl	800016c <isButtonPressed>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d073      	beq.n	8000e88 <fsm_manual_run+0x434>
				{
					status = GREEN_MAN_MODIFY;
 8000da0:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <fsm_manual_run+0x448>)
 8000da2:	220f      	movs	r2, #15
 8000da4:	601a      	str	r2, [r3, #0]
					timer_man = green_timer;
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <fsm_manual_run+0x44c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a3e      	ldr	r2, [pc, #248]	; (8000ea4 <fsm_manual_run+0x450>)
 8000dac:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 4);
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <fsm_manual_run+0x450>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a39      	ldr	r2, [pc, #228]	; (8000e98 <fsm_manual_run+0x444>)
 8000db4:	fb82 1203 	smull	r1, r2, r2, r3
 8000db8:	1092      	asrs	r2, r2, #2
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	1ad0      	subs	r0, r2, r3
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <fsm_manual_run+0x450>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <fsm_manual_run+0x444>)
 8000dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc8:	1099      	asrs	r1, r3, #2
 8000dca:	17d3      	asrs	r3, r2, #31
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	1ad1      	subs	r1, r2, r3
 8000dd8:	2304      	movs	r3, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f000 fad0 	bl	8001380 <updateLedBufferVal>
				}
				break;
 8000de0:	e052      	b.n	8000e88 <fsm_manual_run+0x434>

			case GREEN_MAN_MODIFY:
				displayLed(GREEN_MAN);
 8000de2:	200c      	movs	r0, #12
 8000de4:	f000 fae6 	bl	80013b4 <displayLed>
				//back mode 4
				if(isButtonPressed(0))
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff f9bf 	bl	800016c <isButtonPressed>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <fsm_manual_run+0x3a6>
				{
					status = GREEN_MAN;
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <fsm_manual_run+0x448>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
				}
				//modify
				if(isButtonPressed(1))
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff f9b6 	bl	800016c <isButtonPressed>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d024      	beq.n	8000e50 <fsm_manual_run+0x3fc>
				{
					timer_man++;
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e0e:	6013      	str	r3, [r2, #0]
					if(timer_man > 99) timer_man = 1;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b63      	cmp	r3, #99	; 0x63
 8000e16:	dd02      	ble.n	8000e1e <fsm_manual_run+0x3ca>
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 4);
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <fsm_manual_run+0x444>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1092      	asrs	r2, r2, #2
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad0      	subs	r0, r2, r3
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <fsm_manual_run+0x444>)
 8000e34:	fb83 1302 	smull	r1, r3, r3, r2
 8000e38:	1099      	asrs	r1, r3, #2
 8000e3a:	17d3      	asrs	r3, r2, #31
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	1ad1      	subs	r1, r2, r3
 8000e48:	2304      	movs	r3, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f000 fa98 	bl	8001380 <updateLedBufferVal>
				}
				//save value
				if(isButtonPressed(2))
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff f98b 	bl	800016c <isButtonPressed>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d017      	beq.n	8000e8c <fsm_manual_run+0x438>
				{
					green_timer = timer_man;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <fsm_manual_run+0x44c>)
 8000e62:	6013      	str	r3, [r2, #0]
					yellow_timer = red_timer - green_timer;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <fsm_manual_run+0x454>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <fsm_manual_run+0x44c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <fsm_manual_run+0x458>)
 8000e70:	6013      	str	r3, [r2, #0]
				}

				break;
 8000e72:	e00b      	b.n	8000e8c <fsm_manual_run+0x438>

			default: break;
 8000e74:	bf00      	nop
 8000e76:	e00a      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e78:	bf00      	nop
 8000e7a:	e008      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e7c:	bf00      	nop
 8000e7e:	e006      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e80:	bf00      	nop
 8000e82:	e004      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e84:	bf00      	nop
 8000e86:	e002      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e88:	bf00      	nop
 8000e8a:	e000      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e8c:	bf00      	nop
		}
	}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000b0 	.word	0x200000b0
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	200000a8 	.word	0x200000a8
 8000ea0:	2000005c 	.word	0x2000005c
 8000ea4:	200000a4 	.word	0x200000a4
 8000ea8:	20000054 	.word	0x20000054
 8000eac:	20000058 	.word	0x20000058

08000eb0 <clearLed>:
int led_buffer[4] = {1, 2, 3, 4};
int counter1 = 0;
int counter2 = 0;

	void clearLed()
	{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <clearLed+0x44>)
 8000eba:	f001 f918 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <clearLed+0x44>)
 8000ec4:	f001 f913 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <clearLed+0x44>)
 8000ece:	f001 f90e 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <clearLed+0x44>)
 8000ed8:	f001 f909 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <clearLed+0x44>)
 8000ee2:	f001 f904 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2120      	movs	r1, #32
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <clearLed+0x44>)
 8000eec:	f001 f8ff 	bl	80020ee <HAL_GPIO_WritePin>
	}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <display7SEG>:

	void display7SEG(int num)
	{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
		  if(num == 0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d122      	bne.n	8000f4c <display7SEG+0x54>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	48bd      	ldr	r0, [pc, #756]	; (8001200 <display7SEG+0x308>)
 8000f0c:	f001 f8ef 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	48ba      	ldr	r0, [pc, #744]	; (8001200 <display7SEG+0x308>)
 8000f16:	f001 f8ea 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	48b8      	ldr	r0, [pc, #736]	; (8001200 <display7SEG+0x308>)
 8000f20:	f001 f8e5 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2108      	movs	r1, #8
 8000f28:	48b5      	ldr	r0, [pc, #724]	; (8001200 <display7SEG+0x308>)
 8000f2a:	f001 f8e0 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	48b3      	ldr	r0, [pc, #716]	; (8001200 <display7SEG+0x308>)
 8000f34:	f001 f8db 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	48b0      	ldr	r0, [pc, #704]	; (8001200 <display7SEG+0x308>)
 8000f3e:	f001 f8d6 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	48ae      	ldr	r0, [pc, #696]	; (8001200 <display7SEG+0x308>)
 8000f48:	f001 f8d1 	bl	80020ee <HAL_GPIO_WritePin>
		  }
		  if(num == 1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d122      	bne.n	8000f98 <display7SEG+0xa0>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2101      	movs	r1, #1
 8000f56:	48aa      	ldr	r0, [pc, #680]	; (8001200 <display7SEG+0x308>)
 8000f58:	f001 f8c9 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	48a7      	ldr	r0, [pc, #668]	; (8001200 <display7SEG+0x308>)
 8000f62:	f001 f8c4 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2104      	movs	r1, #4
 8000f6a:	48a5      	ldr	r0, [pc, #660]	; (8001200 <display7SEG+0x308>)
 8000f6c:	f001 f8bf 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2108      	movs	r1, #8
 8000f74:	48a2      	ldr	r0, [pc, #648]	; (8001200 <display7SEG+0x308>)
 8000f76:	f001 f8ba 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	48a0      	ldr	r0, [pc, #640]	; (8001200 <display7SEG+0x308>)
 8000f80:	f001 f8b5 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2120      	movs	r1, #32
 8000f88:	489d      	ldr	r0, [pc, #628]	; (8001200 <display7SEG+0x308>)
 8000f8a:	f001 f8b0 	bl	80020ee <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	489b      	ldr	r0, [pc, #620]	; (8001200 <display7SEG+0x308>)
 8000f94:	f001 f8ab 	bl	80020ee <HAL_GPIO_WritePin>
		  }
		  if(num == 2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d122      	bne.n	8000fe4 <display7SEG+0xec>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4897      	ldr	r0, [pc, #604]	; (8001200 <display7SEG+0x308>)
 8000fa4:	f001 f8a3 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2102      	movs	r1, #2
 8000fac:	4894      	ldr	r0, [pc, #592]	; (8001200 <display7SEG+0x308>)
 8000fae:	f001 f89e 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4892      	ldr	r0, [pc, #584]	; (8001200 <display7SEG+0x308>)
 8000fb8:	f001 f899 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	488f      	ldr	r0, [pc, #572]	; (8001200 <display7SEG+0x308>)
 8000fc2:	f001 f894 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2110      	movs	r1, #16
 8000fca:	488d      	ldr	r0, [pc, #564]	; (8001200 <display7SEG+0x308>)
 8000fcc:	f001 f88f 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	488a      	ldr	r0, [pc, #552]	; (8001200 <display7SEG+0x308>)
 8000fd6:	f001 f88a 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	4888      	ldr	r0, [pc, #544]	; (8001200 <display7SEG+0x308>)
 8000fe0:	f001 f885 	bl	80020ee <HAL_GPIO_WritePin>
			  }
		  if(num == 3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d122      	bne.n	8001030 <display7SEG+0x138>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4884      	ldr	r0, [pc, #528]	; (8001200 <display7SEG+0x308>)
 8000ff0:	f001 f87d 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4881      	ldr	r0, [pc, #516]	; (8001200 <display7SEG+0x308>)
 8000ffa:	f001 f878 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2104      	movs	r1, #4
 8001002:	487f      	ldr	r0, [pc, #508]	; (8001200 <display7SEG+0x308>)
 8001004:	f001 f873 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2108      	movs	r1, #8
 800100c:	487c      	ldr	r0, [pc, #496]	; (8001200 <display7SEG+0x308>)
 800100e:	f001 f86e 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	487a      	ldr	r0, [pc, #488]	; (8001200 <display7SEG+0x308>)
 8001018:	f001 f869 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	2120      	movs	r1, #32
 8001020:	4877      	ldr	r0, [pc, #476]	; (8001200 <display7SEG+0x308>)
 8001022:	f001 f864 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4875      	ldr	r0, [pc, #468]	; (8001200 <display7SEG+0x308>)
 800102c:	f001 f85f 	bl	80020ee <HAL_GPIO_WritePin>
			  }
		  if(num == 4)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d122      	bne.n	800107c <display7SEG+0x184>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	2101      	movs	r1, #1
 800103a:	4871      	ldr	r0, [pc, #452]	; (8001200 <display7SEG+0x308>)
 800103c:	f001 f857 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	486e      	ldr	r0, [pc, #440]	; (8001200 <display7SEG+0x308>)
 8001046:	f001 f852 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2104      	movs	r1, #4
 800104e:	486c      	ldr	r0, [pc, #432]	; (8001200 <display7SEG+0x308>)
 8001050:	f001 f84d 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001054:	2201      	movs	r2, #1
 8001056:	2108      	movs	r1, #8
 8001058:	4869      	ldr	r0, [pc, #420]	; (8001200 <display7SEG+0x308>)
 800105a:	f001 f848 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2110      	movs	r1, #16
 8001062:	4867      	ldr	r0, [pc, #412]	; (8001200 <display7SEG+0x308>)
 8001064:	f001 f843 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2120      	movs	r1, #32
 800106c:	4864      	ldr	r0, [pc, #400]	; (8001200 <display7SEG+0x308>)
 800106e:	f001 f83e 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4862      	ldr	r0, [pc, #392]	; (8001200 <display7SEG+0x308>)
 8001078:	f001 f839 	bl	80020ee <HAL_GPIO_WritePin>
			  }
		  if(num == 5)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d122      	bne.n	80010c8 <display7SEG+0x1d0>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	485e      	ldr	r0, [pc, #376]	; (8001200 <display7SEG+0x308>)
 8001088:	f001 f831 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	2102      	movs	r1, #2
 8001090:	485b      	ldr	r0, [pc, #364]	; (8001200 <display7SEG+0x308>)
 8001092:	f001 f82c 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2104      	movs	r1, #4
 800109a:	4859      	ldr	r0, [pc, #356]	; (8001200 <display7SEG+0x308>)
 800109c:	f001 f827 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2108      	movs	r1, #8
 80010a4:	4856      	ldr	r0, [pc, #344]	; (8001200 <display7SEG+0x308>)
 80010a6:	f001 f822 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2110      	movs	r1, #16
 80010ae:	4854      	ldr	r0, [pc, #336]	; (8001200 <display7SEG+0x308>)
 80010b0:	f001 f81d 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4851      	ldr	r0, [pc, #324]	; (8001200 <display7SEG+0x308>)
 80010ba:	f001 f818 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	; 0x40
 80010c2:	484f      	ldr	r0, [pc, #316]	; (8001200 <display7SEG+0x308>)
 80010c4:	f001 f813 	bl	80020ee <HAL_GPIO_WritePin>
			  }
		  if(num == 6)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d122      	bne.n	8001114 <display7SEG+0x21c>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2101      	movs	r1, #1
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <display7SEG+0x308>)
 80010d4:	f001 f80b 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80010d8:	2201      	movs	r2, #1
 80010da:	2102      	movs	r1, #2
 80010dc:	4848      	ldr	r0, [pc, #288]	; (8001200 <display7SEG+0x308>)
 80010de:	f001 f806 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2104      	movs	r1, #4
 80010e6:	4846      	ldr	r0, [pc, #280]	; (8001200 <display7SEG+0x308>)
 80010e8:	f001 f801 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2108      	movs	r1, #8
 80010f0:	4843      	ldr	r0, [pc, #268]	; (8001200 <display7SEG+0x308>)
 80010f2:	f000 fffc 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2110      	movs	r1, #16
 80010fa:	4841      	ldr	r0, [pc, #260]	; (8001200 <display7SEG+0x308>)
 80010fc:	f000 fff7 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2120      	movs	r1, #32
 8001104:	483e      	ldr	r0, [pc, #248]	; (8001200 <display7SEG+0x308>)
 8001106:	f000 fff2 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	483c      	ldr	r0, [pc, #240]	; (8001200 <display7SEG+0x308>)
 8001110:	f000 ffed 	bl	80020ee <HAL_GPIO_WritePin>
			  }
		  if(num == 7)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b07      	cmp	r3, #7
 8001118:	d122      	bne.n	8001160 <display7SEG+0x268>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2101      	movs	r1, #1
 800111e:	4838      	ldr	r0, [pc, #224]	; (8001200 <display7SEG+0x308>)
 8001120:	f000 ffe5 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2102      	movs	r1, #2
 8001128:	4835      	ldr	r0, [pc, #212]	; (8001200 <display7SEG+0x308>)
 800112a:	f000 ffe0 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2104      	movs	r1, #4
 8001132:	4833      	ldr	r0, [pc, #204]	; (8001200 <display7SEG+0x308>)
 8001134:	f000 ffdb 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	2108      	movs	r1, #8
 800113c:	4830      	ldr	r0, [pc, #192]	; (8001200 <display7SEG+0x308>)
 800113e:	f000 ffd6 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	482e      	ldr	r0, [pc, #184]	; (8001200 <display7SEG+0x308>)
 8001148:	f000 ffd1 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	2120      	movs	r1, #32
 8001150:	482b      	ldr	r0, [pc, #172]	; (8001200 <display7SEG+0x308>)
 8001152:	f000 ffcc 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001156:	2201      	movs	r2, #1
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4829      	ldr	r0, [pc, #164]	; (8001200 <display7SEG+0x308>)
 800115c:	f000 ffc7 	bl	80020ee <HAL_GPIO_WritePin>
			  }
		  if(num == 8)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d122      	bne.n	80011ac <display7SEG+0x2b4>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2101      	movs	r1, #1
 800116a:	4825      	ldr	r0, [pc, #148]	; (8001200 <display7SEG+0x308>)
 800116c:	f000 ffbf 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2102      	movs	r1, #2
 8001174:	4822      	ldr	r0, [pc, #136]	; (8001200 <display7SEG+0x308>)
 8001176:	f000 ffba 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2104      	movs	r1, #4
 800117e:	4820      	ldr	r0, [pc, #128]	; (8001200 <display7SEG+0x308>)
 8001180:	f000 ffb5 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2108      	movs	r1, #8
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <display7SEG+0x308>)
 800118a:	f000 ffb0 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2110      	movs	r1, #16
 8001192:	481b      	ldr	r0, [pc, #108]	; (8001200 <display7SEG+0x308>)
 8001194:	f000 ffab 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2120      	movs	r1, #32
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <display7SEG+0x308>)
 800119e:	f000 ffa6 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	4816      	ldr	r0, [pc, #88]	; (8001200 <display7SEG+0x308>)
 80011a8:	f000 ffa1 	bl	80020ee <HAL_GPIO_WritePin>
			  }
		  if(num == 9)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d122      	bne.n	80011f8 <display7SEG+0x300>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <display7SEG+0x308>)
 80011b8:	f000 ff99 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <display7SEG+0x308>)
 80011c2:	f000 ff94 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2104      	movs	r1, #4
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <display7SEG+0x308>)
 80011cc:	f000 ff8f 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2108      	movs	r1, #8
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <display7SEG+0x308>)
 80011d6:	f000 ff8a 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2110      	movs	r1, #16
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <display7SEG+0x308>)
 80011e0:	f000 ff85 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <display7SEG+0x308>)
 80011ea:	f000 ff80 	bl	80020ee <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <display7SEG+0x308>)
 80011f4:	f000 ff7b 	bl	80020ee <HAL_GPIO_WritePin>
			  }
	}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40010c00 	.word	0x40010c00

08001204 <update7SEG>:


	void update7SEG(int index)
	{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	f200 808c 	bhi.w	800132c <update7SEG+0x128>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <update7SEG+0x18>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	0800122d 	.word	0x0800122d
 8001220:	0800126d 	.word	0x0800126d
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012ed 	.word	0x080012ed
		switch(index)
		{
			case 0:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	4840      	ldr	r0, [pc, #256]	; (8001334 <update7SEG+0x130>)
 8001234:	f000 ff5b 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123e:	483d      	ldr	r0, [pc, #244]	; (8001334 <update7SEG+0x130>)
 8001240:	f000 ff55 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124a:	483a      	ldr	r0, [pc, #232]	; (8001334 <update7SEG+0x130>)
 800124c:	f000 ff4f 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001256:	4837      	ldr	r0, [pc, #220]	; (8001334 <update7SEG+0x130>)
 8001258:	f000 ff49 	bl	80020ee <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 800125c:	4a36      	ldr	r2, [pc, #216]	; (8001338 <update7SEG+0x134>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe47 	bl	8000ef8 <display7SEG>
				break;
 800126a:	e05f      	b.n	800132c <update7SEG+0x128>
			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001272:	4830      	ldr	r0, [pc, #192]	; (8001334 <update7SEG+0x130>)
 8001274:	f000 ff3b 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <update7SEG+0x130>)
 8001280:	f000 ff35 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	482a      	ldr	r0, [pc, #168]	; (8001334 <update7SEG+0x130>)
 800128c:	f000 ff2f 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001296:	4827      	ldr	r0, [pc, #156]	; (8001334 <update7SEG+0x130>)
 8001298:	f000 ff29 	bl	80020ee <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <update7SEG+0x134>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe27 	bl	8000ef8 <display7SEG>
				break;
 80012aa:	e03f      	b.n	800132c <update7SEG+0x128>
			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4820      	ldr	r0, [pc, #128]	; (8001334 <update7SEG+0x130>)
 80012b4:	f000 ff1b 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <update7SEG+0x130>)
 80012c0:	f000 ff15 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <update7SEG+0x130>)
 80012cc:	f000 ff0f 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d6:	4817      	ldr	r0, [pc, #92]	; (8001334 <update7SEG+0x130>)
 80012d8:	f000 ff09 	bl	80020ee <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <update7SEG+0x134>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe07 	bl	8000ef8 <display7SEG>
				break;
 80012ea:	e01f      	b.n	800132c <update7SEG+0x128>
			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <update7SEG+0x130>)
 80012f4:	f000 fefb 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <update7SEG+0x130>)
 8001300:	f000 fef5 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <update7SEG+0x130>)
 800130c:	f000 feef 	bl	80020ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <update7SEG+0x130>)
 8001318:	f000 fee9 	bl	80020ee <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <update7SEG+0x134>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fde7 	bl	8000ef8 <display7SEG>
				break;
 800132a:	bf00      	nop
		}
	}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010800 	.word	0x40010800
 8001338:	20000060 	.word	0x20000060

0800133c <scanLedBuffer>:
	// run led
	void scanLedBuffer()
	{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
		if(is_time_expired(5))
 8001340:	2005      	movs	r0, #5
 8001342:	f000 f9c1 	bl	80016c8 <is_time_expired>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d015      	beq.n	8001378 <scanLedBuffer+0x3c>
		{
			set_timer(5, 250);
 800134c:	21fa      	movs	r1, #250	; 0xfa
 800134e:	2005      	movs	r0, #5
 8001350:	f000 f99a 	bl	8001688 <set_timer>
			update7SEG(index_led);
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <scanLedBuffer+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff53 	bl	8001204 <update7SEG>
			index_led++;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <scanLedBuffer+0x40>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <scanLedBuffer+0x40>)
 8001366:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED)
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <scanLedBuffer+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2204      	movs	r2, #4
 800136e:	4293      	cmp	r3, r2
 8001370:	db02      	blt.n	8001378 <scanLedBuffer+0x3c>
			{
				index_led = 0;
 8001372:	4b02      	ldr	r3, [pc, #8]	; (800137c <scanLedBuffer+0x40>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
			}
		}
	}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000ac 	.word	0x200000ac

08001380 <updateLedBufferVal>:

	void updateLedBufferVal(int val0, int val1, int val2, int val3)
	{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
		led_buffer[0] = val0;
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <updateLedBufferVal+0x30>)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6013      	str	r3, [r2, #0]
		led_buffer[1] = val1;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <updateLedBufferVal+0x30>)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	6053      	str	r3, [r2, #4]
		led_buffer[2] = val2;
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <updateLedBufferVal+0x30>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6093      	str	r3, [r2, #8]
		led_buffer[3] = val3;
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <updateLedBufferVal+0x30>)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	60d3      	str	r3, [r2, #12]
	}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000060 	.word	0x20000060

080013b4 <displayLed>:

	void displayLed(int led_index)
	{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b0a      	subs	r3, #10
 80013c0:	2b0d      	cmp	r3, #13
 80013c2:	d834      	bhi.n	800142e <displayLed+0x7a>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <displayLed+0x18>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	08001405 	.word	0x08001405
 80013d0:	0800140b 	.word	0x0800140b
 80013d4:	08001411 	.word	0x08001411
 80013d8:	0800142f 	.word	0x0800142f
 80013dc:	0800142f 	.word	0x0800142f
 80013e0:	0800142f 	.word	0x0800142f
 80013e4:	0800142f 	.word	0x0800142f
 80013e8:	0800142f 	.word	0x0800142f
 80013ec:	0800142f 	.word	0x0800142f
 80013f0:	0800142f 	.word	0x0800142f
 80013f4:	08001417 	.word	0x08001417
 80013f8:	0800141d 	.word	0x0800141d
 80013fc:	08001423 	.word	0x08001423
 8001400:	08001429 	.word	0x08001429
		switch(led_index)
		{
			case RED_MAN:
							red_man();
 8001404:	f000 fac8 	bl	8001998 <red_man>
				break;
 8001408:	e012      	b.n	8001430 <displayLed+0x7c>
			case YELLOW_MAN:
							yellow_man();
 800140a:	f000 faf1 	bl	80019f0 <yellow_man>
				break;
 800140e:	e00f      	b.n	8001430 <displayLed+0x7c>
			case GREEN_MAN:
							green_man();
 8001410:	f000 fb1a 	bl	8001a48 <green_man>
				break;
 8001414:	e00c      	b.n	8001430 <displayLed+0x7c>
			case REDX_GREENY:
							redx_greeny();
 8001416:	f000 fa2f 	bl	8001878 <redx_greeny>
				break;
 800141a:	e009      	b.n	8001430 <displayLed+0x7c>
			case REDX_YELLOWY:
							redx_yellowy();
 800141c:	f000 fa50 	bl	80018c0 <redx_yellowy>
				break;
 8001420:	e006      	b.n	8001430 <displayLed+0x7c>
			case GREENX_REDY:
							greenx_redy();
 8001422:	f000 fa71 	bl	8001908 <greenx_redy>
				break;
 8001426:	e003      	b.n	8001430 <displayLed+0x7c>
			case YELLOWX_REDY:
							yellowx_redy();
 8001428:	f000 fa92 	bl	8001950 <yellowx_redy>
				break;
 800142c:	e000      	b.n	8001430 <displayLed+0x7c>
			default: break;
 800142e:	bf00      	nop
		}
	}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143c:	f000 fb56 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001440:	f000 f814 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001444:	f000 f89a 	bl	800157c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001448:	f000 f84c 	bl	80014e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <main+0x2c>)
 800144e:	f001 faab 	bl	80029a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  status = INIT;
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <main+0x30>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8001458:	f7fe ff36 	bl	80002c8 <fsm_automatic_run>
	  fsm_manual_run();
 800145c:	f7ff fafa 	bl	8000a54 <fsm_manual_run>
	  fsm_automatic_run();
 8001460:	e7fa      	b.n	8001458 <main+0x20>
 8001462:	bf00      	nop
 8001464:	200000b8 	.word	0x200000b8
 8001468:	200000a8 	.word	0x200000a8

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	2228      	movs	r2, #40	; 0x28
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fe44 	bl	8003108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001492:	2301      	movs	r3, #1
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001496:	2310      	movs	r3, #16
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fe54 	bl	8002150 <HAL_RCC_OscConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ae:	f000 f8e5 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b2:	230f      	movs	r3, #15
 80014b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f8c0 	bl	8002650 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014d6:	f000 f8d1 	bl	800167c <Error_Handler>
  }
}
 80014da:	bf00      	nop
 80014dc:	3740      	adds	r7, #64	; 0x40
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_TIM2_Init+0x94>)
 8001502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_TIM2_Init+0x94>)
 800150a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800150e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_TIM2_Init+0x94>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_TIM2_Init+0x94>)
 8001518:	2209      	movs	r2, #9
 800151a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_TIM2_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_TIM2_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <MX_TIM2_Init+0x94>)
 800152a:	f001 f9ed 	bl	8002908 <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001534:	f000 f8a2 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_TIM2_Init+0x94>)
 8001546:	f001 fb6b 	bl	8002c20 <HAL_TIM_ConfigClockSource>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001550:	f000 f894 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_TIM2_Init+0x94>)
 8001562:	f001 fd43 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800156c:	f000 f886 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200000b8 	.word	0x200000b8

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a2e      	ldr	r2, [pc, #184]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <MX_GPIO_Init+0xd4>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <MX_GPIO_Init+0xd4>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a28      	ldr	r2, [pc, #160]	; (8001650 <MX_GPIO_Init+0xd4>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_GPIO_Init+0xd4>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_GPIO_Init+0xd4>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <MX_GPIO_Init+0xd4>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_GPIO_Init+0xd4>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_red_x_Pin|led_yellow_x_Pin|led_green_x_Pin|led_red_y_Pin
 80015d8:	2200      	movs	r2, #0
 80015da:	f640 717f 	movw	r1, #3967	; 0xf7f
 80015de:	481d      	ldr	r0, [pc, #116]	; (8001654 <MX_GPIO_Init+0xd8>)
 80015e0:	f000 fd85 	bl	80020ee <HAL_GPIO_WritePin>
                          |led_yellow_y_Pin|led_green_y_Pin|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80015e4:	2200      	movs	r2, #0
 80015e6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80015ea:	481b      	ldr	r0, [pc, #108]	; (8001658 <MX_GPIO_Init+0xdc>)
 80015ec:	f000 fd7f 	bl	80020ee <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 80015f0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4619      	mov	r1, r3
 8001604:	4815      	ldr	r0, [pc, #84]	; (800165c <MX_GPIO_Init+0xe0>)
 8001606:	f000 fbe1 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_red_x_Pin led_yellow_x_Pin led_green_x_Pin led_red_y_Pin
                           led_yellow_y_Pin led_green_y_Pin PA6 PA8
                           PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = led_red_x_Pin|led_yellow_x_Pin|led_green_x_Pin|led_red_y_Pin
 800160a:	f640 737f 	movw	r3, #3967	; 0xf7f
 800160e:	613b      	str	r3, [r7, #16]
                          |led_yellow_y_Pin|led_green_y_Pin|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0xd8>)
 8001624:	f000 fbd2 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001628:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800162c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_GPIO_Init+0xdc>)
 8001642:	f000 fbc3 	bl	8001dcc <HAL_GPIO_Init>

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40010800 	.word	0x40010800
 8001658:	40010c00 	.word	0x40010c00
 800165c:	40011000 	.word	0x40011000

08001660 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	timer_run();
 8001668:	f000 f848 	bl	80016fc <timer_run>
	getKeyInput();
 800166c:	f7fe fd98 	bl	80001a0 <getKeyInput>
	scanLedBuffer();
 8001670:	f7ff fe64 	bl	800133c <scanLedBuffer>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <set_timer>:
#include "software_timer.h"

int timer_counter[max];
int timer_flag[max];
void set_timer(int index, int duration)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/tick;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <set_timer+0x34>)
 8001696:	fb82 1203 	smull	r1, r2, r2, r3
 800169a:	1092      	asrs	r2, r2, #2
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad2      	subs	r2, r2, r3
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <set_timer+0x38>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <set_timer+0x3c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2100      	movs	r1, #0
 80016ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	66666667 	.word	0x66666667
 80016c0:	20000100 	.word	0x20000100
 80016c4:	20000128 	.word	0x20000128

080016c8 <is_time_expired>:

int is_time_expired(int index)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(timer_flag[index] == 1)
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <is_time_expired+0x30>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d106      	bne.n	80016ea <is_time_expired+0x22>
	{
		timer_flag[index] = 0;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <is_time_expired+0x30>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2100      	movs	r1, #0
 80016e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <is_time_expired+0x24>
	}
	return 0;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000128 	.word	0x20000128

080016fc <timer_run>:

void timer_run()
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
	for(int i = 0; i < max; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	e01c      	b.n	8001742 <timer_run+0x46>
	{
		if(timer_counter[i] > 0)
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <timer_run+0x58>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	2b00      	cmp	r3, #0
 8001712:	dd08      	ble.n	8001726 <timer_run+0x2a>
		{
			timer_counter[i]--;
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <timer_run+0x58>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <timer_run+0x58>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if(!timer_counter[i])
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <timer_run+0x58>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d104      	bne.n	800173c <timer_run+0x40>
		{
			timer_flag[i] = 1;
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <timer_run+0x5c>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2101      	movs	r1, #1
 8001738:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < max; i++)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3301      	adds	r3, #1
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b09      	cmp	r3, #9
 8001746:	dddf      	ble.n	8001708 <timer_run+0xc>
		}
	}
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000100 	.word	0x20000100
 8001758:	20000128 	.word	0x20000128

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_MspInit+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x5c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MspInit+0x60>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_MspInit+0x60>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d113      	bne.n	80017fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_TIM_Base_MspInit+0x44>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_TIM_Base_MspInit+0x44>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_TIM_Base_MspInit+0x44>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	201c      	movs	r0, #28
 80017f0:	f000 fab5 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017f4:	201c      	movs	r0, #28
 80017f6:	f000 face 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 f993 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <TIM2_IRQHandler+0x10>)
 800185e:	f001 f8ef 	bl	8002a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200000b8 	.word	0x200000b8

0800186c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <redx_greeny>:
 *      Author: PC
 */
#include "traffic_light.h"

	void  redx_greeny()
	{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2101      	movs	r1, #1
 8001880:	480e      	ldr	r0, [pc, #56]	; (80018bc <redx_greeny+0x44>)
 8001882:	f000 fc34 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 8001886:	2201      	movs	r2, #1
 8001888:	2104      	movs	r1, #4
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <redx_greeny+0x44>)
 800188c:	f000 fc2f 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	2102      	movs	r1, #2
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <redx_greeny+0x44>)
 8001896:	f000 fc2a 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2120      	movs	r1, #32
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <redx_greeny+0x44>)
 80018a0:	f000 fc25 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2108      	movs	r1, #8
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <redx_greeny+0x44>)
 80018aa:	f000 fc20 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 80018ae:	2201      	movs	r2, #1
 80018b0:	2110      	movs	r1, #16
 80018b2:	4802      	ldr	r0, [pc, #8]	; (80018bc <redx_greeny+0x44>)
 80018b4:	f000 fc1b 	bl	80020ee <HAL_GPIO_WritePin>
	}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40010800 	.word	0x40010800

080018c0 <redx_yellowy>:

	void redx_yellowy()
	{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	480e      	ldr	r0, [pc, #56]	; (8001904 <redx_yellowy+0x44>)
 80018ca:	f000 fc10 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2104      	movs	r1, #4
 80018d2:	480c      	ldr	r0, [pc, #48]	; (8001904 <redx_yellowy+0x44>)
 80018d4:	f000 fc0b 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 80018d8:	2201      	movs	r2, #1
 80018da:	2102      	movs	r1, #2
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <redx_yellowy+0x44>)
 80018de:	f000 fc06 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2120      	movs	r1, #32
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <redx_yellowy+0x44>)
 80018e8:	f000 fc01 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2108      	movs	r1, #8
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <redx_yellowy+0x44>)
 80018f2:	f000 fbfc 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2110      	movs	r1, #16
 80018fa:	4802      	ldr	r0, [pc, #8]	; (8001904 <redx_yellowy+0x44>)
 80018fc:	f000 fbf7 	bl	80020ee <HAL_GPIO_WritePin>
	}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40010800 	.word	0x40010800

08001908 <greenx_redy>:

	void greenx_redy()
	{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	2101      	movs	r1, #1
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <greenx_redy+0x44>)
 8001912:	f000 fbec 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2104      	movs	r1, #4
 800191a:	480c      	ldr	r0, [pc, #48]	; (800194c <greenx_redy+0x44>)
 800191c:	f000 fbe7 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	2102      	movs	r1, #2
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <greenx_redy+0x44>)
 8001926:	f000 fbe2 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	2120      	movs	r1, #32
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <greenx_redy+0x44>)
 8001930:	f000 fbdd 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2108      	movs	r1, #8
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <greenx_redy+0x44>)
 800193a:	f000 fbd8 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 800193e:	2201      	movs	r2, #1
 8001940:	2110      	movs	r1, #16
 8001942:	4802      	ldr	r0, [pc, #8]	; (800194c <greenx_redy+0x44>)
 8001944:	f000 fbd3 	bl	80020ee <HAL_GPIO_WritePin>
	}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40010800 	.word	0x40010800

08001950 <yellowx_redy>:

	void yellowx_redy()
	{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	2101      	movs	r1, #1
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <yellowx_redy+0x44>)
 800195a:	f000 fbc8 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	2104      	movs	r1, #4
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <yellowx_redy+0x44>)
 8001964:	f000 fbc3 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2102      	movs	r1, #2
 800196c:	4809      	ldr	r0, [pc, #36]	; (8001994 <yellowx_redy+0x44>)
 800196e:	f000 fbbe 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	2120      	movs	r1, #32
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <yellowx_redy+0x44>)
 8001978:	f000 fbb9 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2108      	movs	r1, #8
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <yellowx_redy+0x44>)
 8001982:	f000 fbb4 	bl	80020ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	2110      	movs	r1, #16
 800198a:	4802      	ldr	r0, [pc, #8]	; (8001994 <yellowx_redy+0x44>)
 800198c:	f000 fbaf 	bl	80020ee <HAL_GPIO_WritePin>
	}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40010800 	.word	0x40010800

08001998 <red_man>:

	void red_man()
	{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
		if(is_time_expired(4))
 800199c:	2004      	movs	r0, #4
 800199e:	f7ff fe93 	bl	80016c8 <is_time_expired>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01f      	beq.n	80019e8 <red_man+0x50>
		{
			set_timer(4, 250);
 80019a8:	21fa      	movs	r1, #250	; 0xfa
 80019aa:	2004      	movs	r0, #4
 80019ac:	f7ff fe6c 	bl	8001688 <set_timer>
			HAL_GPIO_TogglePin(led_red_x_GPIO_Port, led_red_x_Pin);
 80019b0:	2101      	movs	r1, #1
 80019b2:	480e      	ldr	r0, [pc, #56]	; (80019ec <red_man+0x54>)
 80019b4:	f000 fbb3 	bl	800211e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2104      	movs	r1, #4
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <red_man+0x54>)
 80019be:	f000 fb96 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2102      	movs	r1, #2
 80019c6:	4809      	ldr	r0, [pc, #36]	; (80019ec <red_man+0x54>)
 80019c8:	f000 fb91 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2120      	movs	r1, #32
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <red_man+0x54>)
 80019d2:	f000 fb8c 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(led_red_y_GPIO_Port, led_red_y_Pin);
 80019d6:	2108      	movs	r1, #8
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <red_man+0x54>)
 80019da:	f000 fba0 	bl	800211e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 80019de:	2201      	movs	r2, #1
 80019e0:	2110      	movs	r1, #16
 80019e2:	4802      	ldr	r0, [pc, #8]	; (80019ec <red_man+0x54>)
 80019e4:	f000 fb83 	bl	80020ee <HAL_GPIO_WritePin>
		}
	}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010800 	.word	0x40010800

080019f0 <yellow_man>:

	void yellow_man()
	{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
		if(is_time_expired(4))
 80019f4:	2004      	movs	r0, #4
 80019f6:	f7ff fe67 	bl	80016c8 <is_time_expired>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01f      	beq.n	8001a40 <yellow_man+0x50>
		{
			set_timer(4, 250);
 8001a00:	21fa      	movs	r1, #250	; 0xfa
 8001a02:	2004      	movs	r0, #4
 8001a04:	f7ff fe40 	bl	8001688 <set_timer>
			HAL_GPIO_TogglePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin);
 8001a08:	2102      	movs	r1, #2
 8001a0a:	480e      	ldr	r0, [pc, #56]	; (8001a44 <yellow_man+0x54>)
 8001a0c:	f000 fb87 	bl	800211e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2104      	movs	r1, #4
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <yellow_man+0x54>)
 8001a16:	f000 fb6a 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <yellow_man+0x54>)
 8001a20:	f000 fb65 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2120      	movs	r1, #32
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <yellow_man+0x54>)
 8001a2a:	f000 fb60 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin);
 8001a2e:	2110      	movs	r1, #16
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <yellow_man+0x54>)
 8001a32:	f000 fb74 	bl	800211e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4802      	ldr	r0, [pc, #8]	; (8001a44 <yellow_man+0x54>)
 8001a3c:	f000 fb57 	bl	80020ee <HAL_GPIO_WritePin>
		}
	}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40010800 	.word	0x40010800

08001a48 <green_man>:

	void green_man()
	{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
		if(is_time_expired(4))
 8001a4c:	2004      	movs	r0, #4
 8001a4e:	f7ff fe3b 	bl	80016c8 <is_time_expired>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01f      	beq.n	8001a98 <green_man+0x50>
		{
			set_timer(4, 250);
 8001a58:	21fa      	movs	r1, #250	; 0xfa
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f7ff fe14 	bl	8001688 <set_timer>
			HAL_GPIO_TogglePin(led_green_x_GPIO_Port, led_green_x_Pin);
 8001a60:	2104      	movs	r1, #4
 8001a62:	480e      	ldr	r0, [pc, #56]	; (8001a9c <green_man+0x54>)
 8001a64:	f000 fb5b 	bl	800211e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	480b      	ldr	r0, [pc, #44]	; (8001a9c <green_man+0x54>)
 8001a6e:	f000 fb3e 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	2102      	movs	r1, #2
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <green_man+0x54>)
 8001a78:	f000 fb39 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2108      	movs	r1, #8
 8001a80:	4806      	ldr	r0, [pc, #24]	; (8001a9c <green_man+0x54>)
 8001a82:	f000 fb34 	bl	80020ee <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(led_green_y_GPIO_Port, led_green_y_Pin);
 8001a86:	2120      	movs	r1, #32
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <green_man+0x54>)
 8001a8a:	f000 fb48 	bl	800211e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2110      	movs	r1, #16
 8001a92:	4802      	ldr	r0, [pc, #8]	; (8001a9c <green_man+0x54>)
 8001a94:	f000 fb2b 	bl	80020ee <HAL_GPIO_WritePin>
		}
	}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40010800 	.word	0x40010800

08001aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff fee4 	bl	800186c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa6:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001abc:	4c09      	ldr	r4, [pc, #36]	; (8001ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f001 faf9 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ace:	f7ff fcb3 	bl	8001438 <main>
  bx lr
 8001ad2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001adc:	0800315c 	.word	0x0800315c
  ldr r2, =_sbss
 8001ae0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ae4:	20000154 	.word	0x20000154

08001ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_Init+0x28>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_Init+0x28>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 f923 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f808 	bl	8001b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f7ff fe28 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x54>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x58>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f93b 	bl	8001db2 <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00e      	b.n	8001b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	d80a      	bhi.n	8001b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f000 f903 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_InitTick+0x5c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000070 	.word	0x20000070
 8001b70:	20000078 	.word	0x20000078
 8001b74:	20000074 	.word	0x20000074

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x1c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_IncTick+0x20>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <HAL_IncTick+0x20>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	20000078 	.word	0x20000078
 8001b98:	20000150 	.word	0x20000150

08001b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <HAL_GetTick+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	20000150 	.word	0x20000150

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <__NVIC_EnableIRQ+0x34>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff90 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff2d 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff42 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff90 	bl	8001ca0 <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5f 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff35 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e148      	b.n	8002072 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de0:	2201      	movs	r2, #1
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8137 	bne.w	800206c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4aa3      	ldr	r2, [pc, #652]	; (8002090 <HAL_GPIO_Init+0x2c4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05e      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e08:	4aa1      	ldr	r2, [pc, #644]	; (8002090 <HAL_GPIO_Init+0x2c4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d875      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e0e:	4aa1      	ldr	r2, [pc, #644]	; (8002094 <HAL_GPIO_Init+0x2c8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d058      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e14:	4a9f      	ldr	r2, [pc, #636]	; (8002094 <HAL_GPIO_Init+0x2c8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d86f      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e1a:	4a9f      	ldr	r2, [pc, #636]	; (8002098 <HAL_GPIO_Init+0x2cc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d052      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e20:	4a9d      	ldr	r2, [pc, #628]	; (8002098 <HAL_GPIO_Init+0x2cc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d869      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e26:	4a9d      	ldr	r2, [pc, #628]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04c      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a9b      	ldr	r2, [pc, #620]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d863      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e32:	4a9b      	ldr	r2, [pc, #620]	; (80020a0 <HAL_GPIO_Init+0x2d4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d046      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e38:	4a99      	ldr	r2, [pc, #612]	; (80020a0 <HAL_GPIO_Init+0x2d4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d85d      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d82a      	bhi.n	8001e98 <HAL_GPIO_Init+0xcc>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d859      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <HAL_GPIO_Init+0x80>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ea1 	.word	0x08001ea1
 8001e54:	08001eb3 	.word	0x08001eb3
 8001e58:	08001ef5 	.word	0x08001ef5
 8001e5c:	08001efb 	.word	0x08001efb
 8001e60:	08001efb 	.word	0x08001efb
 8001e64:	08001efb 	.word	0x08001efb
 8001e68:	08001efb 	.word	0x08001efb
 8001e6c:	08001efb 	.word	0x08001efb
 8001e70:	08001efb 	.word	0x08001efb
 8001e74:	08001efb 	.word	0x08001efb
 8001e78:	08001efb 	.word	0x08001efb
 8001e7c:	08001efb 	.word	0x08001efb
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001efb 	.word	0x08001efb
 8001e88:	08001efb 	.word	0x08001efb
 8001e8c:	08001efb 	.word	0x08001efb
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001ebd 	.word	0x08001ebd
 8001e98:	4a82      	ldr	r2, [pc, #520]	; (80020a4 <HAL_GPIO_Init+0x2d8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9e:	e02c      	b.n	8001efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e029      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	3304      	adds	r3, #4
 8001eae:	623b      	str	r3, [r7, #32]
          break;
 8001eb0:	e024      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	3308      	adds	r3, #8
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e01f      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e01a      	b.n	8001efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e013      	b.n	8001efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001edc:	2308      	movs	r3, #8
 8001ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	611a      	str	r2, [r3, #16]
          break;
 8001ee6:	e009      	b.n	8001efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	615a      	str	r2, [r3, #20]
          break;
 8001ef2:	e003      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e000      	b.n	8001efc <HAL_GPIO_Init+0x130>
          break;
 8001efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d801      	bhi.n	8001f06 <HAL_GPIO_Init+0x13a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_Init+0x13e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d802      	bhi.n	8001f18 <HAL_GPIO_Init+0x14c>
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x152>
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	3b08      	subs	r3, #8
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	210f      	movs	r1, #15
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8090 	beq.w	800206c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f64:	4a51      	ldr	r2, [pc, #324]	; (80020ac <HAL_GPIO_Init+0x2e0>)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a49      	ldr	r2, [pc, #292]	; (80020b0 <HAL_GPIO_Init+0x2e4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_GPIO_Init+0x1e0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a48      	ldr	r2, [pc, #288]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_Init+0x1dc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_GPIO_Init+0x1d8>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e004      	b.n	8001fae <HAL_GPIO_Init+0x1e2>
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x1e2>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_GPIO_Init+0x1e2>
 8001fac:	2300      	movs	r3, #0
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	f002 0203 	and.w	r2, r2, #3
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	4093      	lsls	r3, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fbe:	493b      	ldr	r1, [pc, #236]	; (80020ac <HAL_GPIO_Init+0x2e0>)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4937      	ldr	r1, [pc, #220]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4933      	ldr	r1, [pc, #204]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002000:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	492d      	ldr	r1, [pc, #180]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4929      	ldr	r1, [pc, #164]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002018:	4013      	ands	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4923      	ldr	r1, [pc, #140]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	491f      	ldr	r1, [pc, #124]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002040:	4013      	ands	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4919      	ldr	r1, [pc, #100]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	4915      	ldr	r1, [pc, #84]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8002068:	4013      	ands	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	3301      	adds	r3, #1
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	f47f aeaf 	bne.w	8001de0 <HAL_GPIO_Init+0x14>
  }
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	372c      	adds	r7, #44	; 0x2c
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	10320000 	.word	0x10320000
 8002094:	10310000 	.word	0x10310000
 8002098:	10220000 	.word	0x10220000
 800209c:	10210000 	.word	0x10210000
 80020a0:	10120000 	.word	0x10120000
 80020a4:	10110000 	.word	0x10110000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	807b      	strh	r3, [r7, #2]
 80020fa:	4613      	mov	r3, r2
 80020fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fe:	787b      	ldrb	r3, [r7, #1]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002104:	887a      	ldrh	r2, [r7, #2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800210a:	e003      	b.n	8002114 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	041a      	lsls	r2, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	611a      	str	r2, [r3, #16]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002130:	887a      	ldrh	r2, [r7, #2]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	041a      	lsls	r2, r3, #16
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43d9      	mvns	r1, r3
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	400b      	ands	r3, r1
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e26c      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b04      	cmp	r3, #4
 800217a:	d00c      	beq.n	8002196 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800217c:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d112      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
 8002188:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d10b      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06c      	beq.n	800227c <HAL_RCC_OscConfig+0x12c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d168      	bne.n	800227c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e246      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x76>
 80021b8:	4b80      	ldr	r3, [pc, #512]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a7f      	ldr	r2, [pc, #508]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e02e      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7a      	ldr	r2, [pc, #488]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b78      	ldr	r3, [pc, #480]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a77      	ldr	r2, [pc, #476]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01d      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0xbc>
 80021f2:	4b72      	ldr	r3, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a71      	ldr	r2, [pc, #452]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 800220c:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a67      	ldr	r2, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002222:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fcb6 	bl	8001b9c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff fcb2 	bl	8001b9c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1fa      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0xe4>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff fca2 	bl	8001b9c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7ff fc9e 	bl	8001b9c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1e6      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x10c>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d063      	beq.n	8002352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228a:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002296:	4b49      	ldr	r3, [pc, #292]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d11c      	bne.n	80022dc <HAL_RCC_OscConfig+0x18c>
 80022a2:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d116      	bne.n	80022dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x176>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e1ba      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4939      	ldr	r1, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	e03a      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fc57 	bl	8001b9c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f2:	f7ff fc53 	bl	8001b9c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e19b      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4927      	ldr	r1, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	e015      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fc36 	bl	8001b9c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7ff fc32 	bl	8001b9c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e17a      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03a      	beq.n	80023d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7ff fc16 	bl	8001b9c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fc12 	bl	8001b9c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e15a      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_RCC_OscConfig+0x26c>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002392:	2001      	movs	r0, #1
 8002394:	f000 fa9a 	bl	80028cc <RCC_Delay>
 8002398:	e01c      	b.n	80023d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7ff fbfc 	bl	8001b9c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a6:	e00f      	b.n	80023c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff fbf8 	bl	8001b9c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d908      	bls.n	80023c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e140      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	42420000 	.word	0x42420000
 80023c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b9e      	ldr	r3, [pc, #632]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e9      	bne.n	80023a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80a6 	beq.w	800252e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b97      	ldr	r3, [pc, #604]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b94      	ldr	r3, [pc, #592]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a93      	ldr	r2, [pc, #588]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b91      	ldr	r3, [pc, #580]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d118      	bne.n	800244c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a8a      	ldr	r2, [pc, #552]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7ff fbb9 	bl	8001b9c <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7ff fbb5 	bl	8001b9c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0fd      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x4f8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x312>
 8002454:	4b7b      	ldr	r3, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a7a      	ldr	r2, [pc, #488]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	e02d      	b.n	80024be <HAL_RCC_OscConfig+0x36e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x334>
 800246a:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a75      	ldr	r2, [pc, #468]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a72      	ldr	r2, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	e01c      	b.n	80024be <HAL_RCC_OscConfig+0x36e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x356>
 800248c:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a6c      	ldr	r2, [pc, #432]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a69      	ldr	r2, [pc, #420]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0x36e>
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a66      	ldr	r2, [pc, #408]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	4b64      	ldr	r3, [pc, #400]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a63      	ldr	r2, [pc, #396]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d015      	beq.n	80024f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7ff fb69 	bl	8001b9c <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7ff fb65 	bl	8001b9c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0ab      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ee      	beq.n	80024ce <HAL_RCC_OscConfig+0x37e>
 80024f0:	e014      	b.n	800251c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fb53 	bl	8001b9c <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7ff fb4f 	bl	8001b9c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e095      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ee      	bne.n	80024fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b48      	ldr	r3, [pc, #288]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a47      	ldr	r2, [pc, #284]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8081 	beq.w	800263a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d061      	beq.n	8002608 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d146      	bne.n	80025da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254c:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_OscConfig+0x4fc>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fb23 	bl	8001b9c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff fb1f 	bl	8001b9c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e067      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d108      	bne.n	8002594 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	492d      	ldr	r1, [pc, #180]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002594:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a19      	ldr	r1, [r3, #32]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	430b      	orrs	r3, r1
 80025a6:	4927      	ldr	r1, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x4fc>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7ff faf3 	bl	8001b9c <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7ff faef 	bl	8001b9c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e037      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x46a>
 80025d8:	e02f      	b.n	800263a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_RCC_OscConfig+0x4fc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fadc 	bl	8001b9c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff fad8 	bl	8001b9c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e020      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x498>
 8002606:	e018      	b.n	800263a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e013      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	42420060 	.word	0x42420060

08002650 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0d0      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d910      	bls.n	8002694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4965      	ldr	r1, [pc, #404]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b63      	ldr	r3, [pc, #396]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0b8      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ac:	4b59      	ldr	r3, [pc, #356]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a58      	ldr	r2, [pc, #352]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a52      	ldr	r2, [pc, #328]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	494d      	ldr	r1, [pc, #308]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d040      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d115      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e07f      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b41      	ldr	r3, [pc, #260]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e073      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06b      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4936      	ldr	r1, [pc, #216]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7ff fa2c 	bl	8001b9c <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7ff fa28 	bl	8001b9c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e053      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b27      	ldr	r3, [pc, #156]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d210      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4922      	ldr	r1, [pc, #136]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e032      	b.n	8002806 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4916      	ldr	r1, [pc, #88]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	490e      	ldr	r1, [pc, #56]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027de:	f000 f821 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	490a      	ldr	r1, [pc, #40]	; (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	5ccb      	ldrb	r3, [r1, r3]
 80027f2:	fa22 f303 	lsr.w	r3, r2, r3
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1cc>)
 80027f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1d0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f98a 	bl	8001b18 <HAL_InitTick>

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40022000 	.word	0x40022000
 8002814:	40021000 	.word	0x40021000
 8002818:	08003130 	.word	0x08003130
 800281c:	20000070 	.word	0x20000070
 8002820:	20000074 	.word	0x20000074

08002824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b04      	cmp	r3, #4
 800284c:	d002      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x30>
 800284e:	2b08      	cmp	r3, #8
 8002850:	d003      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x36>
 8002852:	e027      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002856:	613b      	str	r3, [r7, #16]
      break;
 8002858:	e027      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	0c9b      	lsrs	r3, r3, #18
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0c5b      	lsrs	r3, r3, #17
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002886:	fb02 f203 	mul.w	r2, r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e004      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	613b      	str	r3, [r7, #16]
      break;
 80028a2:	e002      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetSysClockFreq+0x98>)
 80028a6:	613b      	str	r3, [r7, #16]
      break;
 80028a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028aa:	693b      	ldr	r3, [r7, #16]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	007a1200 	.word	0x007a1200
 80028c0:	08003140 	.word	0x08003140
 80028c4:	08003150 	.word	0x08003150
 80028c8:	003d0900 	.word	0x003d0900

080028cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <RCC_Delay+0x34>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <RCC_Delay+0x38>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0a5b      	lsrs	r3, r3, #9
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e8:	bf00      	nop
  }
  while (Delay --);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	60fa      	str	r2, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f9      	bne.n	80028e8 <RCC_Delay+0x1c>
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000070 	.word	0x20000070
 8002904:	10624dd3 	.word	0x10624dd3

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e041      	b.n	800299e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe ff46 	bl	80017c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 fa56 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e035      	b.n	8002a2c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_TIM_Base_Start_IT+0x90>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d009      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x4e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ea:	d004      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x4e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <HAL_TIM_Base_Start_IT+0x94>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d111      	bne.n	8002a1a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d010      	beq.n	8002a2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a18:	e007      	b.n	8002a2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40000400 	.word	0x40000400

08002a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0202 	mvn.w	r2, #2
 8002a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f998 	bl	8002dc0 <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f98b 	bl	8002dae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f99a 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0204 	mvn.w	r2, #4
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f972 	bl	8002dc0 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f965 	bl	8002dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f974 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d020      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0208 	mvn.w	r2, #8
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f94c 	bl	8002dc0 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f93f 	bl	8002dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f94e 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d020      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0210 	mvn.w	r2, #16
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f926 	bl	8002dc0 <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f919 	bl	8002dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f928 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0201 	mvn.w	r2, #1
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fd5a 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa6f 	bl	80030ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8f8 	bl	8002de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0220 	mvn.w	r2, #32
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa42 	bl	800309c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_TIM_ConfigClockSource+0x1c>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e0b4      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x186>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c74:	d03e      	beq.n	8002cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8002c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7a:	f200 8087 	bhi.w	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c82:	f000 8086 	beq.w	8002d92 <HAL_TIM_ConfigClockSource+0x172>
 8002c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8a:	d87f      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d01a      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8002c90:	2b70      	cmp	r3, #112	; 0x70
 8002c92:	d87b      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d050      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x11a>
 8002c98:	2b60      	cmp	r3, #96	; 0x60
 8002c9a:	d877      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d03c      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0xfa>
 8002ca0:	2b50      	cmp	r3, #80	; 0x50
 8002ca2:	d873      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d058      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x13a>
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d86f      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d064      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x15a>
 8002cb0:	2b30      	cmp	r3, #48	; 0x30
 8002cb2:	d86b      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d060      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x15a>
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d867      	bhi.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d05c      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d05a      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x15a>
 8002cc4:	e062      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f000 f96a 	bl	8002fae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	609a      	str	r2, [r3, #8]
      break;
 8002cf2:	e04f      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f000 f953 	bl	8002fae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d16:	609a      	str	r2, [r3, #8]
      break;
 8002d18:	e03c      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f000 f8ca 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2150      	movs	r1, #80	; 0x50
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f921 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002d38:	e02c      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f000 f8e8 	bl	8002f1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2160      	movs	r1, #96	; 0x60
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f911 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002d58:	e01c      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 f8aa 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2140      	movs	r1, #64	; 0x40
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f901 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002d78:	e00c      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f000 f8f8 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002d8a:	e003      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d90:	e000      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
	...

08002df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a2b      	ldr	r2, [pc, #172]	; (8002eb8 <TIM_Base_SetConfig+0xc0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <TIM_Base_SetConfig+0x28>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e16:	d003      	beq.n	8002e20 <TIM_Base_SetConfig+0x28>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <TIM_Base_SetConfig+0xc4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d108      	bne.n	8002e32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <TIM_Base_SetConfig+0xc0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0x52>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0x52>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <TIM_Base_SetConfig+0xc4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <TIM_Base_SetConfig+0xc0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d103      	bne.n	8002e90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f023 0201 	bic.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	611a      	str	r2, [r3, #16]
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40000400 	.word	0x40000400

08002ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f023 030a 	bic.w	r3, r3, #10
 8002efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0210 	bic.w	r2, r3, #16
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	031b      	lsls	r3, r3, #12
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	621a      	str	r2, [r3, #32]
}
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f043 0307 	orr.w	r3, r3, #7
 8002f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	609a      	str	r2, [r3, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	021a      	lsls	r2, r3, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	609a      	str	r2, [r3, #8]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e041      	b.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d004      	beq.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10c      	bne.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003062:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	4313      	orrs	r3, r2
 800306c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400

0800309c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	2600      	movs	r6, #0
 80030c4:	4d0c      	ldr	r5, [pc, #48]	; (80030f8 <__libc_init_array+0x38>)
 80030c6:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c8:	1b64      	subs	r4, r4, r5
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	f000 f822 	bl	8003118 <_init>
 80030d4:	2600      	movs	r6, #0
 80030d6:	4d0a      	ldr	r5, [pc, #40]	; (8003100 <__libc_init_array+0x40>)
 80030d8:	4c0a      	ldr	r4, [pc, #40]	; (8003104 <__libc_init_array+0x44>)
 80030da:	1b64      	subs	r4, r4, r5
 80030dc:	10a4      	asrs	r4, r4, #2
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003154 	.word	0x08003154
 80030fc:	08003154 	.word	0x08003154
 8003100:	08003154 	.word	0x08003154
 8003104:	08003158 	.word	0x08003158

08003108 <memset>:
 8003108:	4603      	mov	r3, r0
 800310a:	4402      	add	r2, r0
 800310c:	4293      	cmp	r3, r2
 800310e:	d100      	bne.n	8003112 <memset+0xa>
 8003110:	4770      	bx	lr
 8003112:	f803 1b01 	strb.w	r1, [r3], #1
 8003116:	e7f9      	b.n	800310c <memset+0x4>

08003118 <_init>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr

08003124 <_fini>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	bf00      	nop
 8003128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312a:	bc08      	pop	{r3}
 800312c:	469e      	mov	lr, r3
 800312e:	4770      	bx	lr
